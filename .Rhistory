x
x
library(triangle)
plot(function(x) dtriangle(x, a=1, b=4, c=1), 0, 10)
plot(function(x) dtriangle(x, a=1, b=4, c=2), 0, 10)
approx(c(1,2,3), y = NULL, method = "linear", n = 50, yleft=-5, yright=20, rule = 1:1)
approxfun(c(1,2,3), y = NULL, method = "linear", n = 50, yleft=-5, yright=20, rule = 1:1)
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = 50, yleft=-5, yright=20, rule = 1:1)
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = NA
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = NA, yleft=-5, yright=20, rule = 1:1)
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = NA, yleft=-5, yright=20, rule = 1:1)
#linear interpolation
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = , yleft=-5, yright=20, rule = 1:1)
#linear interpolation
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1))
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1))
#-
x1<-c(1,2,3)
y<-approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y)
curve(y, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
1<-c(1,2,3)
y<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y)
curve(y, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
x1<-c(1,2,3)
y<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y)
curve(y, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
curve(y, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
x1<-c(1,2,3)
y1<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y1)
curve(y1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
curve(y1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
x1<-c(1,2,3)
y1<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y1)
curve(y1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
y1<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
y1<-approxfun(x=x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
x1<-c(0.5,1,1,0.5)
y1<-(10,25,30,0)
f1<-approxfun(x=x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
x1<-c(0,0.5,1,1,0.5,0)
y1<-(5,10,25,30,50,60)
f1<-approxfun(x=x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
x1<-c(0,0.5,1,1,0.5,0)
y1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1))
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1)
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1))
curve(approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1), from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1))
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1)", ylim=c(0,1))
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1)", ylim=c(0,1))
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)", ylim=c(0,1))
main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)")
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)")
main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)")
mydata<-rnorm(n=200, m=10, sd=2)
my.data<-rnorm(n=200, m=10, sd=2)
hist(my-data, main="hist of my.data")
hist(my.data, main="hist of my.data")
par(new=T)
plot(density(my.data), main="desnity estimation of my data")
plot(ecdf(my.data), main="empircal cumulative distribution functions")
qqnorm(my.data)
abline(0,1)
abline(0,1)
abline(0,10)
sd(my.data)
my.data.norm<-(my.data-mean(my.data))/sd(my.data)
qqnorm(my.data.norm)
my.data.norm<-(my.data-mean(my.data))/sd(my.data)
qqnorm(my.data.norm)
abline(0,1)
#PORBABILITY DENSITIES
# 4 figures arranged in 4 rows and 2 columns
par(mfrow=c(4, 2))
#uniform
#curve(dunif(x, min = 0, max = 1, log = FALSE))
curve(dunif(x, min = 0, max = 1), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dunif(x, min = 0, max = 1)", ylim=c(0,1))
curve(punif(x, min = 0, max = 1), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#traingular
library(triangle)
#plot(function(x) dtriangle(x, a=1, b=4, c=1.1), 0, 10)
curve(dtriangle(x, a=1, b=4, c=1.8), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dtriangle(x, a=1, b=4, c=1.8)", ylim=c(0,1))
curve(ptriangle(x, a=1, b=4, c=1.8), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#normal
#plot(function(x) dnorm(x, mean = 0, sd = 1, log = FALSE), -1, 1, main="normal, mean=0, sd=1")
#par(new=T)
#plot(function(x) dnorm(x, mean = 0, sd = 0.25, log = FALSE), -1, 1, main="normal, mean=0, sd=1",xlab='', ylab='', axes=F)
#par(new=T)
#plot(function(x) dnorm(x, mean = 0, sd = 100, log = FALSE), -1, 1, main="normal, mean=0, sd=1",xlab='', ylab='', axes=F)
curve(dnorm(x, mean = 0, sd = 0.6), from=-2, to=5, add=NA, ylab=NA, xlab = NA, main="dnorm(x, mean = 0, sd = 0.6)", ylim=c(0,1))
curve(pnorm(x, mean = 0, sd = 0.6), from=-2, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#lognorm
#plot(function(x) dlnorm(x, mean = 0, sd = 1, log = FALSE), 0, 10, main="lognormal, mean=0, sd=1")
curve(dlnorm(x, mean = 2, sd = 1), from=-1, to=40, add=NA, ylab=NA, xlab = NA, main="dlnorm(x, mean = 1, sd = 1)", ylim=c(0,1))
curve(plnorm(x, mean = 2, sd = 1), from=-1, to=40, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#logistic
#plot(function(x) dlogis(x, location = 0, scale = 1), -10, 10, main="logistic, location=0, scale=1")
curve(dlogis(x, location = 1, scale = 0.25), from=-2, to=5, add=NA, ylab=NA, xlab = NA, main="dlogis(x, location = 1, scale = 0.25)", ylim=c(0,1))
curve(plogis(x, location = 1, scale = 0.25), from=-2, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#gamma
#plot(function(x) dgamma(x, shape=1, log = FALSE))
curve(dgamma(x, shape=1, scale=1), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dgamma(x, shape=1, scale=1)", ylim=c(0,1))
#rate=1/scale
curve(pgamma(x, shape=1, scale=1), from=-1, to=5, col="blue", add=T, ylab=NA, ylim=c(0,1))
#beta
#plot(function(x) dbeta(x, shape1=1, shape2=2, ncp = 0, log = FALSE))
curve(dbeta(x, shape1=2, shape2=3, ncp = 0), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
curve(pbeta(x, shape1=2, shape2=3, ncp = 0), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1.75))
#weibull
curve(dweibull(x, shape = 1.5, scale = 1, log = FALSE), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dweibull(x, shape = 1.5, scale = 1, log = FALSE)", ylim=c(0,1))
curve(pweibull(x, shape = 1.5, scale = 1, log = FALSE), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
par(mfrow=c(1, 1))
#------------------------------------------------------------------------------------------------------------------------
#INTERPOLATIONS
#linear interpolation
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1)
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)", ylim=c(0,1))
#spline interpolation
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-splinefun(x=x1,y=y1, method = c("fmm", "periodic", "natural", "monoH.FC", "hyman"), ties = mean)
curve(f1, from=-5, to=80, add=T, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)")
#PORBABILITY DENSITIES
# 4 figures arranged in 4 rows and 2 columns
par(mfrow=c(4, 2))
#uniform
#curve(dunif(x, min = 0, max = 1, log = FALSE))
curve(dunif(x, min = 0, max = 1), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dunif(x, min = 0, max = 1)", ylim=c(0,1))
curve(punif(x, min = 0, max = 1), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#traingular
library(triangle)
#plot(function(x) dtriangle(x, a=1, b=4, c=1.1), 0, 10)
curve(dtriangle(x, a=1, b=4, c=1.8), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dtriangle(x, a=1, b=4, c=1.8)", ylim=c(0,1))
curve(ptriangle(x, a=1, b=4, c=1.8), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#normal
#plot(function(x) dnorm(x, mean = 0, sd = 1, log = FALSE), -1, 1, main="normal, mean=0, sd=1")
#par(new=T)
#plot(function(x) dnorm(x, mean = 0, sd = 0.25, log = FALSE), -1, 1, main="normal, mean=0, sd=1",xlab='', ylab='', axes=F)
#par(new=T)
#plot(function(x) dnorm(x, mean = 0, sd = 100, log = FALSE), -1, 1, main="normal, mean=0, sd=1",xlab='', ylab='', axes=F)
curve(dnorm(x, mean = 0, sd = 0.6), from=-2, to=5, add=NA, ylab=NA, xlab = NA, main="dnorm(x, mean = 0, sd = 0.6)", ylim=c(0,1))
curve(pnorm(x, mean = 0, sd = 0.6), from=-2, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#lognorm
#plot(function(x) dlnorm(x, mean = 0, sd = 1, log = FALSE), 0, 10, main="lognormal, mean=0, sd=1")
curve(dlnorm(x, mean = 2, sd = 1), from=-1, to=40, add=NA, ylab=NA, xlab = NA, main="dlnorm(x, mean = 1, sd = 1)", ylim=c(0,1))
curve(plnorm(x, mean = 2, sd = 1), from=-1, to=40, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#logistic
#plot(function(x) dlogis(x, location = 0, scale = 1), -10, 10, main="logistic, location=0, scale=1")
curve(dlogis(x, location = 1, scale = 0.25), from=-2, to=5, add=NA, ylab=NA, xlab = NA, main="dlogis(x, location = 1, scale = 0.25)", ylim=c(0,1))
curve(plogis(x, location = 1, scale = 0.25), from=-2, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#gamma
#plot(function(x) dgamma(x, shape=1, log = FALSE))
curve(dgamma(x, shape=1, scale=1), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dgamma(x, shape=1, scale=1)", ylim=c(0,1))
#rate=1/scale
curve(pgamma(x, shape=1, scale=1), from=-1, to=5, col="blue", add=T, ylab=NA, ylim=c(0,1))
#beta
#plot(function(x) dbeta(x, shape1=1, shape2=2, ncp = 0, log = FALSE))
curve(dbeta(x, shape1=2, shape2=3, ncp = 0), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
curve(pbeta(x, shape1=2, shape2=3, ncp = 0), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1.75))
#weibull
curve(dweibull(x, shape = 1.5, scale = 1, log = FALSE), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dweibull(x, shape = 1.5, scale = 1, log = FALSE)", ylim=c(0,1))
curve(pweibull(x, shape = 1.5, scale = 1, log = FALSE), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
par(mfrow=c(1, 1))
t_tmin <- 10
t_tmax <- 200
c_tmin <- 5
c_tmax <- 40
c_tmean <- 15
tr_temp <- function (x, t_tmin, t_tmax) {dunif(x, min = t_tmin, max =t_tmax)/dunif(x, min = t_tmin, max =t_tmax)}
cc_temp <- function (x, c_tmin, c_tmax, c_tmean) {dtriangle(x, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (tr_temp, cc_temp) {tr_temp*cc_temp}
t_app_temp_score <- integrate(app_temp, -Inf, Inf)
t_tmin <- 10
t_tmax <- 200
c_tmin <- 5
c_tmax <- 40
c_tmean <- 15
tr_temp <- function (x, t_tmin, t_tmax) {dunif(x, min = t_tmin, max =t_tmax)/dunif(x, min = t_tmin, max =t_tmax)}
cc_temp <- function (x, c_tmin, c_tmax, c_tmean) {dtriangle(x, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (tr_temp, cc_temp) {tr_temp*cc_temp}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score <- integrate(tr_temp*cc_temp, -Inf, Inf)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)/dunif(x, min = t_tmin, max =t_tmax)}
tr_temp(1)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)/dunif(x, min = t_tmin, max =t_tmax)}
tr_temp(15)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)}
tr_temp(1)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)}
tr_temp(1)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)}
cc_temp <- function (x) {dtriangle(x, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (x) {tr_temp(x)*cc_temp(x)}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score
tr_temp <- function (t) {dunif(t, min = t_tmin, max =t_tmax)}
cc_temp <- function (t) {dtriangle(t, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (t) {tr_temp(t)*cc_temp(t)}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score
tr_temp <- function (t) {dunif(t, min = t_tmin, max =t_tmax)/dunif(t_min, min = t_tmin, max =t_tmax)}
cc_temp <- function (t) {dtriangle(t, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (t) {tr_temp(t)*cc_temp(t)}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score
tr_temp <- function (t) {dunif(t, min = t_tmin, max =t_tmax)/dunif(t_tmin, min = t_tmin, max =t_tmax)}
cc_temp <- function (t) {dtriangle(t, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (t) {tr_temp(t)*cc_temp(t)}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score
install.packages("rlist")
library(rlist)  #to manupulate/
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
which R
version
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
choose(225, 4)
choose(225, 5)
choose(225, 6)
choose(205, 6)
rm(list=ls())
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
# Load required functions
source("build.list.r") # reads the csv data files for technologies and cases descriptions
source("appfunctions.r") # contains functions that are not provided in R such as ranges
source("mc.integrate.r") # function(case.app.fun, tech.app.fun, n.sample=10000) used to integrate by sampling
source("compute.techapp.r") # functions(tech, case,lshowplot=FALSE) returning app.profile and app.score
source("compute.techapplist.r") # function(techlist, caselist, listsep=" ", filename="") making all the app profiles for a techlist and applist
source("techapplist.write.r") # function(applist, listsep=" ", filename="") writes applist
## ==============================================================================================
## EXAMPLES ON HOW TO USE THE CODE
## ==============================================================================================
# Create the list of technology appropriateness functions and the list of case appropriateness functions
caselist<- build.list("casedata.csv",2)
techlist<- build.list("techdata.csv",3)
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$septic.tank,lshowplot = TRUE)
app.item.tmp <- compute.techapp(caselist$thimi, techlist$septic.tank,lshowplot = TRUE)
# Create empty list
applist1=list()
# Compute examples
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$thimi, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$single.pit, lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$double.pit, lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
# Print examples
print(t(app.item.tmp), digits=4)  #optionally app.septic.tank[1:3] for tech, case, score, can't print the tech.app.profile as it is list in list
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the som of probs has to be =1
# rcat(x, probs)
# pcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techapp.r") # Returns app.profile and app.score (aggregated profile)
# compute.techapp(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
# Create the list of technology appropriateness functions and the list of case appropriateness functions
caselist<- build.list("casedata.csv",2)
techlist<- build.list("techdata.csv",3)
## ==============================================================================================
# COMPUTE app.proiles FOR A PAIR OF TECH AND CASE (caselist$case, techlist$tech)
# Using compute.techapp
# Create empty list
applist1=list()
# Compute examples
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$thimi, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$single.pit, lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$double.pit, lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
# Print examples
print(t(app.item.tmp), digits=4)  #optionally app.septic.tank[1:3] for tech, case, score, can't print the tech.app.profile as it is list in list
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the som of probs has to be =1
# rcat(x, probs)
# pcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techapp.r") # Returns app.profile and app.score (aggregated profile)
# compute.techapp(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
## ==============================================================================================
# Create the list of technology appropriateness functions and the list of case appropriateness functions
caselist<- build.list("casedata.csv",2)
techlist<- build.list("techdata.csv",3)
## ==============================================================================================
# COMPUTE app.proiles FOR A PAIR OF TECH AND CASE (caselist$case, techlist$tech)
# Using compute.techapp
# Create empty list
applist1=list()
# Compute examples
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$thimi, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$single.pit, lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$double.pit, lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
# Print examples
print(t(app.item.tmp), digits=4)  #optionally app.septic.tank[1:3] for tech, case, score, can't print the tech.app.profile as it is list in list
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$septic.tank,lshowplot = TRUE)
applist1=list()
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
print(t(app.item.tmp), digits=4)  #optionally app.septic.tank[1:3] for tech, case, score, can't print the tech.app.profile as it is list in list
app.item.tmp <- compute.techapp(caselist$thimi, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
print(t(app.item.tmp), digits=4)  #optionally app.septic.tank[1:3] for tech, case, score, can't print the tech.app.profile as it is list in list
applist1
applist2<-compute.techapplist(caselist,techlist,lsort=TRUE)
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
applist2<-compute.techapplist(caselist,techlist,lsort=TRUE)
applist2<-compute.techapplist(caselist,techlist,lsort=TRUE)
applist2<-compute.techapplist(caselist,techlist,lsort=TRUE)
techapplist.write(applist2)
rm(list=ls())
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the som of probs has to be =1
# rcat(x, probs)
# pcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techapp.r") # Returns app.profile and app.score (aggregated profile)
# compute.techapp(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
## ==============================================================================================
# Create the list of technology appropriateness functions and the list of case appropriateness functions
caselist<- build.list("casedata.csv",2)
techlist<- build.list("techdata.csv",3)
applist1=list()
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$thimi, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$single.pit, lshowplot = TRUE)
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$double.pit, lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
print(t(app.item.tmp), digits=4)  #optionally app.septic.tank[1:3] for tech, case, score, can't print the tech.app.profile as it is list in list
applist2<-compute.techapplist(caselist,techlist,lsort=TRUE)
techapplist.write(applist2)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.techapp(caselist$arbaminch, techlist$double.pit, lshowplot = TRUE)
print(t(app.item.tmp), digits=4)  #optionally app.septic.tank[1:3] for tech, case, score, can't print the tech.app.profile as it is list in list
applist2<-compute.techapplist(caselist,techlist,lsort=TRUE)
techapplist.write(applist2)
applist2
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
techapplist.write(applist2)
techapplist.write(applist2, listsep=";", filename="app_list2.csv")
applist<-applist2
sub.applist=list.filter(applist,case=="arbaminch")
cat("====================== \n")
cat("Only arbaminch  \n")
techapplist.write(sub.applist)
sub.applist=list.filter(applist,case=="arbaminch", tech.app.score>0)
cat("====================== \n")
cat("Only arbaminch and score > 0 \n")
techapplist.write(sub.applist)
sub.applist=list.filter(applist,case=="arbaminch", tech=="single.pit")
sub.applist[[1]]$tech.app.profile$bod
# using $ instead of list.filter
caselist_daniel<- build.list("casedata_daniel-250116.csv",2)
techlist_daniel<- build.list("techdata_daniel-250116.csv",3)
compute.techapp(caselist_daniel$arbaminch,techlist_daniel$pour.flush, lshowplot=TRUE)
compute.techapp(caselist_daniel$arbaminch,techlist_daniel$UDDT, lshowplot=TRUE)
compute.techapp(caselist_daniel$arbaminch,techlist_daniel$UDDT, lshowplot=TRUE)
compute.techapp(caselist_daniel$arbaminch,techlist_daniel$single.pit, lshowplot=TRUE)
compute.techapp(caselist_daniel$arbaminch,techlist_daniel$wsp, lshowplot=TRUE)
techapplist_daniel<-compute.techapplist(caselist_daniel,techlist_daniel,lsort=TRUE)
techapplist.write(techapplist_daniel)
techapplist.write(techapplist_daniel, listsep=";", filename="techapplist_daniel.csv")
caselist_test<- build.list("casedata_ex.csv",2)
techlist_test<- build.list("techdata_ex.csv",3)
compute.techapp(caselist_test$arbaminch,techlist_test$T1.wsp, lshowplot=TRUE)
techlist_test<- build.list("techdata_ex.csv",3)
compute.techapp(caselist_test$arbaminch,techlist_test$T1.wsp, lshowplot=TRUE)
caselist_test<- build.list("casedata_ex.csv",2)
techlist_test<- build.list("techdata_ex.csv",3)
techlist_test<- build.list("techdata_ex.csv",3)
compute.techapp(caselist_test$arbaminch,techlist_test$T1.wsp, lshowplot=TRUE)
compute.techapp(caselist_test$arbaminch,techlist_test$septic.tank, lshowplot=TRUE)
techapplist_test<-compute.techapplist(caselist_test,techlist_test,lsort=TRUE)
techapplist.write(techapplist_test)
techapplist.write(techapplist_test, listsep=";", filename="techapplist_test.csv")
caselist_test<- build.list("casedata_ex_yn.csv",2)
techlist_test<- build.list("techdata_ex_yn.csv",3)
compute.techapp(caselist_test$arbaminch,techlist_test$uddt, lshowplot=FALSE)
compute.techapp(caselist_test$arbaminch,techlist_test$dry.toilet, lshowplot=FALSE)
yesnotest<-compute.techapplist(caselist_test,techlist_test,lsort=FALSE)
techapplist.write(yesnotest)
