plot(case$app.fun[[attr]], col=casecolor, axes = FALSE, xlab = " ", ylab = " ",xlim=c(0,Xmaxplot))
axis(side = 4,col=casecolor)
legend(x="topleft",legend=c("caseapp.fun","techapp.fun"),col=c(casecolor,techcolor),
inset=.02, lwd=4, lty=c(1,1))
# Compute total technology appropriatness score
l=length(techapp.profile)
techapp.score=(prod(techapp.profile))^(1/l) # the normlized product of all attrapp.scores
}
}
}
## Make multiplot title and legend
# if(lshowplot) {
#   mtext(paste(techname,", ",casename,"- techapp.score",techapp.score), outer = TRUE )
#    #place text in the lower right corner of the graphic ("legend")
#    mtext("- tech.app.fun                      ", col=techcolor, outer=TRUE, side=1, adj=1, line=-1, cex=cex_label)
#    mtext("- case.app.fun",col=casecolor , outer=TRUE, side=1, adj=1, line=-1, cex=cex_label)
#setwd("C:/Users/gundlajo/Code/plots")
#dev.copy(pdf,paste(casename,", ",techname,".pdf"))
#dev.off()
#etwd("C:/Users/gundlajo/Code/appropriateness_joel")
#      }
title(paste(techname,", ",casename,"- techapp.score",techapp.score), outer=TRUE)
dev.off()
# Compute total technology appropriatness score
l=length(techapp.profile)
techapp.score=(prod(techapp.profile))^(1/l) # the normlized product of all attrapp.scores
## Create a list with the results
techapp.profile=setNames(techapp.profile,attr.names)
techapp.data=list(case=casename, tech=techname, techapp.score=techapp.score, techapp.profile=as.list(techapp.profile))
techapp.data
}
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
compute.techapp= function(case, tech, lshowplot=FALSE){
# This functions computes the attrapp.scores and the techapp.score for a tech in a given case
# Usage
# compute.techapp(case, tech, [lshowplot=FALSE])
# Input:
# tech: a technology from the technology list, e.g. techlist$septic.tank
# case: a case from the case list, e.g. caselist$arbaminch
# app.fun: both tech and cases contain app.fun, functions for each appropriateness attribute
# Variables:
# attrapp.score: the mc.intrgrate(tech$app.fun, case$app.fun)
# techapp.profile: all the attrapp.core of a given tech & case
# techapp.score: normalized product of all attrapp.scores
# lshowplot: if TRUE plots are generated to illustrate the overall of the case and tech$app.fun
# Output:
# tech.app.data: list containing tech, case, techapp.score, techapp.profile (containing names(tech$app.fun), values)
tech
techapp.profile  = c() # create empty vector to store intermediate result
attr.names = c() # create empty vectore to store names of used attributes
n.tech.app.fun=length(names(tech$app.fun)) # number of attributes
n.case.app.fun=length(names(case$app.fun)) # number of attributes
n.app.fun=min(n.tech.app.fun,n.case.app.fun)
## Get tech name and case name
# From the list if it exists
if ( ("casename" %in% names(case)) && ("techname" %in% names(tech) ) ){
techname=tech$techname
casename=case$casename
}else{
# Form the function call argument otherwise (assuming call with case$casename)
techname=unlist(strsplit(deparse(substitute(tech)),"\\$"))
techname=techname[2]
casename=unlist(strsplit(deparse(substitute(case)),"\\$"))
casename=casename[2]
}
# in case there are no attributes, n.app.fun is 0. In this case the function retruns a score of 1
if (n.app.fun==0){
techapp.data=list()
techapp.data$tech=techname
techapp.data$case=casename
techapp.data$techapp.score=1
techapp.data$techapp.profile=as.list(c("attr"="NULL"))
return(techapp.data)
}
## Prepare plot for visual interpreataion of results if lshowplot=TRUE
# parameters
techcolor="darkorange"
casecolor="dodgerblue"
if(lshowplot){
# Create multiple plot table
par(mfcol=c(n.app.fun,1)) # dimensions of plot, the raw number is equal
# to the number of appropriateness functions
par(mar = c(3, 3, 3, 2), oma = c(2, 1, 2, 4)) # margins for plot window
}
# ****Finally its gowing to becoming interesting: Compute the attribute appropriateness scores and profiles
# This loup provides the techapp.profiles using a function to integrate the tech and case app functions by sampling (see mc.integrate.R)
pdf(file=paste("C:/Users/gundlajo/Code/plots/","techapp.score - ",techname,", ",casename,".pdf"),width=7,height=9)
par(mfrow=(c(3,1)), oma=c(2,1,2,4))
for(attr in names(tech$app.fun)){
# Check that this attribute also exist in case$app.fun, otherwise skip
if (attr %in% names(case$app.fun)){
# Store attribute names
attr.names=c(attr.names,attr)
# Calculate app.score
f1 = tech$app.fun[[attr]]
f2 = case$app.fun[[attr]]
attrapp.score = mc.integrate(f1,f2)
techapp.profile = c(techapp.profile, attrapp.score)
# Now create the plots for visual analysis of the results (only if lshowplot=TRUE)
if(lshowplot){
# define plot xlim using max value
maxxlim=40000 # max possible value
xval=seq(0,maxxlim,1) # vector of values to evaluate the last non-zero point in the intevall 1:maxxlim
# only used for plotting as not precise because uses only integer values
# for functions with max smaller than 1, put 0.1 as intervall in seq
techval=tech$app.fun[[attr]](xval) # computing tech$app.fun for xval
caseval=case$app.fun[[attr]](xval) # computing case$app.fun for xval
Xmaxtech=xval[max(which(techval>0))]   # find the highest xval for which techval is nonzero
# in case of warning message "In max(which(techval > 0)) : no non-missing arguments to max; returning -Inf", you need to increase maxlim
if (Xmaxtech>=maxxlim) Xmaxtech=0.0001 # if tech$app.fun is const until Inf set Xmaxtech to very small in order not to be considered
Xmaxcase=xval[max(which(caseval>0))]   # find the highest xval for which caseval is nonzero
# in case of warning message "In max(which(caseval > 0)) : no non-missing arguments to max; returning -Inf", you need to increase maxlim
if (Xmaxcase>=maxxlim) Xmaxcase=0.0001 # if tech$app.fun is const until Inf set Xmaxcase to very small in order not to be considered
Xmaxplot=max(Xmaxtech,Xmaxcase)+1 # set the higher of Xmaxcase and Xmactech as Xmax for plots
# plot
plot(tech$app.fun[[attr]], main=paste(attr,"-","attrapp.score",attrapp.score), xlab=" ", ylab=" ", xlim=c(0,Xmaxplot), col=techcolor)
cex_label= par("cex")*par("cex.lab")
axis(side = 2,col=techcolor)
par(new = T)
plot(case$app.fun[[attr]], col=casecolor, axes = FALSE, xlab = " ", ylab = " ",xlim=c(0,Xmaxplot))
axis(side = 4,col=casecolor)
legend(x="topleft",legend=c("caseapp.fun","techapp.fun"),col=c(casecolor,techcolor),
inset=.02, lwd=4, lty=c(1,1))
# Compute total technology appropriatness score
l=length(techapp.profile)
techapp.score=(prod(techapp.profile))^(1/l) # the normlized product of all attrapp.scores
}
}
}
## Make multiplot title and legend
# if(lshowplot) {
#   mtext(paste(techname,", ",casename,"- techapp.score",techapp.score), outer = TRUE )
#    #place text in the lower right corner of the graphic ("legend")
#    mtext("- tech.app.fun                      ", col=techcolor, outer=TRUE, side=1, adj=1, line=-1, cex=cex_label)
#    mtext("- case.app.fun",col=casecolor , outer=TRUE, side=1, adj=1, line=-1, cex=cex_label)
#setwd("C:/Users/gundlajo/Code/plots")
#dev.copy(pdf,paste(casename,", ",techname,".pdf"))
#dev.off()
#etwd("C:/Users/gundlajo/Code/appropriateness_joel")
#      }
title(paste(techname,", ",casename,"- techapp.score",techapp.score), outer=TRUE)
dev.off()
# Compute total technology appropriatness score
l=length(techapp.profile)
techapp.score=(prod(techapp.profile))^(1/l) # the normlized product of all attrapp.scores
## Create a list with the results
techapp.profile=setNames(techapp.profile,attr.names)
techapp.data=list(case=casename, tech=techname, techapp.score=techapp.score, techapp.profile=as.list(techapp.profile))
techapp.data
}
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
compute.techapp= function(case, tech, lshowplot=FALSE){
# This functions computes the attrapp.scores and the techapp.score for a tech in a given case
# Usage
# compute.techapp(case, tech, [lshowplot=FALSE])
# Input:
# tech: a technology from the technology list, e.g. techlist$septic.tank
# case: a case from the case list, e.g. caselist$arbaminch
# app.fun: both tech and cases contain app.fun, functions for each appropriateness attribute
# Variables:
# attrapp.score: the mc.intrgrate(tech$app.fun, case$app.fun)
# techapp.profile: all the attrapp.core of a given tech & case
# techapp.score: normalized product of all attrapp.scores
# lshowplot: if TRUE plots are generated to illustrate the overall of the case and tech$app.fun
# Output:
# tech.app.data: list containing tech, case, techapp.score, techapp.profile (containing names(tech$app.fun), values)
tech
techapp.profile  = c() # create empty vector to store intermediate result
attr.names = c() # create empty vectore to store names of used attributes
n.tech.app.fun=length(names(tech$app.fun)) # number of attributes
n.case.app.fun=length(names(case$app.fun)) # number of attributes
n.app.fun=min(n.tech.app.fun,n.case.app.fun)
## Get tech name and case name
# From the list if it exists
if ( ("casename" %in% names(case)) && ("techname" %in% names(tech) ) ){
techname=tech$techname
casename=case$casename
}else{
# Form the function call argument otherwise (assuming call with case$casename)
techname=unlist(strsplit(deparse(substitute(tech)),"\\$"))
techname=techname[2]
casename=unlist(strsplit(deparse(substitute(case)),"\\$"))
casename=casename[2]
}
# in case there are no attributes, n.app.fun is 0. In this case the function retruns a score of 1
if (n.app.fun==0){
techapp.data=list()
techapp.data$tech=techname
techapp.data$case=casename
techapp.data$techapp.score=1
techapp.data$techapp.profile=as.list(c("attr"="NULL"))
return(techapp.data)
}
## Prepare plot for visual interpreataion of results if lshowplot=TRUE
# parameters
techcolor="darkorange"
casecolor="dodgerblue"
if(lshowplot){
# Create multiple plot table
par(mfcol=c(n.app.fun,1)) # dimensions of plot, the raw number is equal
# to the number of appropriateness functions
par(mar = c(3, 3, 3, 2), oma = c(2, 1, 2, 4)) # margins for plot window
}
# ****Finally its gowing to becoming interesting: Compute the attribute appropriateness scores and profiles
# This loup provides the techapp.profiles using a function to integrate the tech and case app functions by sampling (see mc.integrate.R)
pdf(file=paste("C:/Users/gundlajo/Code/plots/","techapp.score - ",casename,", ",techname,".pdf"),width=7,height=9)
par(mfrow=(c(3,1)), oma=c(2,1,2,4))
for(attr in names(tech$app.fun)){
# Check that this attribute also exist in case$app.fun, otherwise skip
if (attr %in% names(case$app.fun)){
# Store attribute names
attr.names=c(attr.names,attr)
# Calculate app.score
f1 = tech$app.fun[[attr]]
f2 = case$app.fun[[attr]]
attrapp.score = mc.integrate(f1,f2)
techapp.profile = c(techapp.profile, attrapp.score)
# Now create the plots for visual analysis of the results (only if lshowplot=TRUE)
if(lshowplot){
# define plot xlim using max value
maxxlim=40000 # max possible value
xval=seq(0,maxxlim,1) # vector of values to evaluate the last non-zero point in the intevall 1:maxxlim
# only used for plotting as not precise because uses only integer values
# for functions with max smaller than 1, put 0.1 as intervall in seq
techval=tech$app.fun[[attr]](xval) # computing tech$app.fun for xval
caseval=case$app.fun[[attr]](xval) # computing case$app.fun for xval
Xmaxtech=xval[max(which(techval>0))]   # find the highest xval for which techval is nonzero
# in case of warning message "In max(which(techval > 0)) : no non-missing arguments to max; returning -Inf", you need to increase maxlim
if (Xmaxtech>=maxxlim) Xmaxtech=0.0001 # if tech$app.fun is const until Inf set Xmaxtech to very small in order not to be considered
Xmaxcase=xval[max(which(caseval>0))]   # find the highest xval for which caseval is nonzero
# in case of warning message "In max(which(caseval > 0)) : no non-missing arguments to max; returning -Inf", you need to increase maxlim
if (Xmaxcase>=maxxlim) Xmaxcase=0.0001 # if tech$app.fun is const until Inf set Xmaxcase to very small in order not to be considered
Xmaxplot=max(Xmaxtech,Xmaxcase)+1 # set the higher of Xmaxcase and Xmactech as Xmax for plots
# plot
plot(tech$app.fun[[attr]], main=paste(attr,"-","attrapp.score",attrapp.score), xlab=" ", ylab=" ", xlim=c(0,Xmaxplot), col=techcolor)
cex_label= par("cex")*par("cex.lab")
axis(side = 2,col=techcolor)
par(new = T)
plot(case$app.fun[[attr]], col=casecolor, axes = FALSE, xlab = " ", ylab = " ",xlim=c(0,Xmaxplot))
axis(side = 4,col=casecolor)
legend(x="topleft",legend=c("caseapp.fun","techapp.fun"),col=c(casecolor,techcolor),
inset=.02, lwd=4, lty=c(1,1))
# Compute total technology appropriatness score
l=length(techapp.profile)
techapp.score=(prod(techapp.profile))^(1/l) # the normlized product of all attrapp.scores
}
}
}
## Make multiplot title and legend
# if(lshowplot) {
#   mtext(paste(techname,", ",casename,"- techapp.score",techapp.score), outer = TRUE )
#    #place text in the lower right corner of the graphic ("legend")
#    mtext("- tech.app.fun                      ", col=techcolor, outer=TRUE, side=1, adj=1, line=-1, cex=cex_label)
#    mtext("- case.app.fun",col=casecolor , outer=TRUE, side=1, adj=1, line=-1, cex=cex_label)
#setwd("C:/Users/gundlajo/Code/plots")
#dev.copy(pdf,paste(casename,", ",techname,".pdf"))
#dev.off()
#etwd("C:/Users/gundlajo/Code/appropriateness_joel")
#      }
title(paste(techname,", ",casename,"- techapp.score",techapp.score), outer=TRUE)
dev.off()
# Compute total technology appropriatness score
l=length(techapp.profile)
techapp.score=(prod(techapp.profile))^(1/l) # the normlized product of all attrapp.scores
## Create a list with the results
techapp.profile=setNames(techapp.profile,attr.names)
techapp.data=list(case=casename, tech=techname, techapp.score=techapp.score, techapp.profile=as.list(techapp.profile))
techapp.data
}
library(triangle)
library (trapezoid)
library(rlist)
library(gridExtra)
library(ColorPalette)
source("build.list.r")
source("appfunctions.r")
source("mc.integrate.r")
source("compute.techapp.r")
source("compute.techapplist.r")
source("techapplist.write.r")
source("build.syslist_joel.r")
caselist<- build.list("casedata_demo.csv")
techlist<- build.list("techdata_demo.csv")
sysliste_demo <- build.syslist("sysdata_test.csv")
applist_demo=list()
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
source("compute.sysapp.by.product_joel.r")
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
source("compute.sysapp.by.mean_joel.r")
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
##@@@@@@@@@@@@@@@@@@@@@@@@ joel test
library(triangle)
library (trapezoid)
library(rlist)
library(gridExtra)
library(ColorPalette)
source("build.list.r")
source("appfunctions.r")
source("mc.integrate.r")
source("compute.techapp.r")
source("compute.techapplist.r")
source("techapplist.write.r")
source("build.syslist_joel.r")
caselist<- build.list("casedata_danien-250166.csv")
techlist<- build.list("techdata_danien-250166.csv")
sysliste_demo <- build.syslist("sysdata_test.csv")
applist_demo=list()
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
source("compute.sysapp.by.product_joel.r")
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
source("compute.sysapp.by.mean_joel.r")
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
library(triangle)
library (trapezoid)
library(rlist)
library(gridExtra)
library(ColorPalette)
source("build.list.r")
source("appfunctions.r")
source("mc.integrate.r")
source("compute.techapp.r")
source("compute.techapplist.r")
source("techapplist.write.r")
source("build.syslist_joel.r")
caselist<- build.list("casedata_daniel-250166.csv")
techlist<- build.list("techdata_daniel-250166.csv")
sysliste_demo <- build.syslist("sysdata_test.csv")
applist_demo=list()
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
source("compute.sysapp.by.product_joel.r")
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
source("compute.sysapp.by.mean_joel.r")
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
caselist<- build.list("casedata_daniel-250166.csv")
#@@@@@@@@@@@@@@@@@@@@@@@@ joel test
library(triangle)
library (trapezoid)
library(rlist)
library(gridExtra)
library(ColorPalette)
source("build.list.r")
source("appfunctions.r")
source("mc.integrate.r")
source("compute.techapp.r")
source("compute.techapplist.r")
source("techapplist.write.r")
source("build.syslist_joel.r")
caselist<- build.list("casedata_test.csv")
techlist<- build.list("techdata_test.csv")
sysliste_demo <- build.syslist("sysdata_test.csv")
applist_demo=list()
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
source("compute.sysapp.by.product_joel.r")
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
source("compute.sysapp.by.mean_joel.r")
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
##@@@@@@@@@@@@@@@@@@@@@@@@ joel test
library(triangle)
library (trapezoid)
library(rlist)
library(gridExtra)
library(ColorPalette)
source("build.list.r")
source("appfunctions.r")
source("mc.integrate.r")
source("compute.techapp.r")
source("compute.techapplist.r")
source("techapplist.write.r")
source("build.syslist_joel.r")
caselist<- build.list("casedata_test.csv")
caselist<- build.list("casedata_test.csv")
techlist<- build.list("techdata_test.csv")
sysliste_demo <- build.syslist("sysdata_test.csv")
applist_demo=list()
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
source("compute.sysapp.by.product_joel.r")
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
source("compute.sysapp.by.mean_joel.r")
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
compute.sysapp.by.product= function(sysliste_demo,applist_demo){
cases=names(caselist)
ll=list()
for(g in 1:length(sapply(names(caselist),length))){
sysapp.score=c()
systechapp.score=c()
sysattrapp.score=c()
sysapp.score.tot=c()
for(j in 1:length(sapply(sysliste_demo,length))){
sysattrapp.profile=c()
for(attr in names(sysliste_demo[[j]]$app.fun)){
if(attr %in% names(caselist[[g]]$app.fun)){
f1 = sysliste_demo[[j]]$app.fun[[attr]]
f2 = caselist[[g]]$app.fun[[attr]]
attrapp.score = mc.integrate(f1,f2)
sysattrapp.profile = c(sysattrapp.profile, attrapp.score)
}
else{sysattrapp.profile=0}
}
l.sysattr=length(sysattrapp.profile)
sysattrapp.score1=(prod(sysattrapp.profile))^(1/l.sysattr)
for(i in 1:length(sapply(applist_demo,length))){
if(applist_demo[[i]]$case == cases[[g]] &
applist_demo[[i]]$tech %in% names(sysliste_demo[[j]]$techs)){
systechapp.score[i]=applist_demo[[i]]$techapp.score
}
}
systechapp.score2=systechapp.score[!is.na(systechapp.score)]
l.systech=length(systechapp.score2)
sysapp.score[j]=(prod(systechapp.score2))^(1/l.systech)
sysattrapp.score[[j]]=sysattrapp.score1
sysapp.score.tot[[j]]=sysattrapp.score[[j]]*sysapp.score[[j]]
}
pdf(file=paste("C:/Users/gundlajo/Code/plots/","System appropriatnes score (by prod.)  ",cases[[g]],".pdf"))
barplot(sysapp.score.tot, main=cases[g], ylim= c(0:1),names.arg=names(sysliste_demo),
ylab="System appropriatnes score")
dev.off()
ll.sys=list()
ll.case=list()
ll.case=cases[g]
for(e in 1:length(sapply(sysliste_demo,length))){
ll.sys[[e]]=paste(names(sysliste_demo)[[e]],"appscore=",sysapp.score.tot[[e]])
}
ll[[ll.case]]=ll.sys
}
ll
}
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
library(triangle)
library (trapezoid)
library(rlist)
library(gridExtra)
library(ColorPalette)
source("build.list.r")
source("appfunctions.r")
source("mc.integrate.r")
source("compute.techapp.r")
source("compute.techapplist.r")
source("techapplist.write.r")
source("build.syslist_joel.r")
caselist<- build.list("casedata_demo.csv")
techlist<- build.list("techdata_demo.csv")
sysliste_demo <- build.syslist("sysdata_demo.csv")
applist_demo=list()
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
source("compute.sysapp.by.product_joel.r")
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
source("compute.sysapp.by.mean_joel.r")
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
##@@@@@@@@@@@@@@@@@@@@@@@@ joel test
library(triangle)
library (trapezoid)
library(rlist)
library(gridExtra)
library(ColorPalette)
source("build.list.r")
source("appfunctions.r")
source("mc.integrate.r")
source("compute.techapp.r")
source("compute.techapplist.r")
source("techapplist.write.r")
source("build.syslist_joel.r")
caselist<- build.list("casedata_demo.csv")
techlist<- build.list("techdata_demo.csv")
sysliste_demo <- build.syslist("sysdata_demo.csv")
applist_demo=list()
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
source("compute.sysapp.by.product_joel.r")
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
source("compute.sysapp.by.mean_joel.r")
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
caselist<- build.list("casedata_daniel.csv")
techlist<- build.list("techdata_daniel.csv")
sysliste_demo <- build.syslist("sysdata_demo.csv")
applist_demo=list()
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
source("compute.sysapp.by.product_joel.r")
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
source("compute.sysapp.by.mean_joel.r")
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
##@@@@@@@@@@@@@@@@@@@@@@@@ joel test
library(triangle)
library (trapezoid)
library(rlist)
library(gridExtra)
library(ColorPalette)
source("build.list.r")
source("appfunctions.r")
source("mc.integrate.r")
source("compute.techapp.r")
source("compute.techapplist.r")
source("techapplist.write.r")
source("build.syslist_joel.r")
caselist<- build.list("casedata_demo.csv")
techlist<- build.list("techdata_demo.csv")
sysliste_demo <- build.syslist("sysdata_demo.csv")
applist_demo=list()
applist_demo<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=TRUE)
source("compute.sysapp.by.product_joel.r")
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
source("compute.sysapp.by.mean_joel.r")
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
for (i in 1:10){
}
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
sysapplist_demo.mean<-compute.sysapp.by.mean(sysliste_demo,applist_demo)
sensitivity=list()
for (i in 1:10){
sysapplist_demo.prod<-compute.sysapp.by.product(sysliste_demo,applist_demo)
sensitivity[[i]]=sysapplist_demo.prod
}
