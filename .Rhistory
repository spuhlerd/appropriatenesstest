dtriang(x, min=-1, mode=0, max=1, log=FALSE)
library(triangle)
dtriang(x, min=-1, mode=0, max=1, log=FALSE)
version
triangle.dtriang(x, min=-1, mode=0, max=1, log=FALSE)
triangle::dltriangle(x, min=-1, mode=0, max=1, log=FALSE)
x
triangle::dltriangle(function(x), min=-1, mode=0, max=1, log=FALSE)
triangle::dltriangle(function(x), min=-1, mode=0, max=1, log=FALSE)
triangle::dltriangle(function(x), min=-1, mode=0, max=1, log=FALSE)
triangle::dltriangle(function(x) min=-1, mode=0, max=1, log=FALSE)
dltriangle(x, min=-1, mode=0, max=1, log=FALSE)
dltriangle(3, min=-1, mode=0, max=1, log=FALSE)
dltriangle(x, min=-1, mode=0, max=1, log=FALSE)
dltriangle(x, min=-1, mode=0, max=1, log=FALSE)
dltriangle(x)
x
curve(dtriang(x, min=3, mode=5, max=10), from = 0, to = 10)
curve(triangle::dtriangle(x, min=3, mode=5, max=10), from = 0, to = 10)
curve(triangle::dtriangle(x, min=0, mode=0, max=10), from = 0, to = 10)
curve(triangle::dtriangle(x), from = 0, to = 10)
x
plot(function(x) triangle::dtriangle(x, min=0, mode=0, max=10), from = 0, to = 10))
plot(function(x) triangle::dtriangle(x, min=0, mode=0, max=10), from = 0, to = 10)
plot(function(x) triangle::dtriangle(x), from = 0, to = 10)
plot(function(x) triangle::dtriangle(x, min=1, mode=1, max=11), from = 0, to = 10)
plot(function(x) triangle::dtriangle(x, min=1, mode=1, max=0.5, from = 0, to = 10)
plot(function(x) triangle::dtriangle(x, min=1, mode=1, max=0.5, from = 0, to = 10)
plot(function(x) triangle::dtriangle(x, a=1, b=1, c=0.5, from = 0, to = 10)
plot(function(x) triangle::dtriangle(x, a=1, b=1, c=0.5), from = 0, to = 10)
plot(function(x) triangle::dtriangle(x, a=1, b=1, c=0.5), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, b=2, c=0.5), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, b=2), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, b=4), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, c=4), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, c=4), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, b=4), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, b=4, c=2.5), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, b=4, c=2), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, b=4, c=2), 0, 10)
par(new=T)
plot(function(x) triangle::dtriangle(x, a=1, b=4, c=6), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, b=4, c=3), 0, 10)
par(new=T)
plot(function(x) triangle::dtriangle(x, a=1, b=4, c=1), 0, 10)
plot(function(x) triangle::dtriangle(x, a=1, b=4, c=1), 0, 10)
x
x
library(triangle)
plot(function(x) dtriangle(x, a=1, b=4, c=1), 0, 10)
plot(function(x) dtriangle(x, a=1, b=4, c=2), 0, 10)
approx(c(1,2,3), y = NULL, method = "linear", n = 50, yleft=-5, yright=20, rule = 1:1)
approxfun(c(1,2,3), y = NULL, method = "linear", n = 50, yleft=-5, yright=20, rule = 1:1)
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = 50, yleft=-5, yright=20, rule = 1:1)
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = NA
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = NA, yleft=-5, yright=20, rule = 1:1)
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = NA, yleft=-5, yright=20, rule = 1:1)
#linear interpolation
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", n = , yleft=-5, yright=20, rule = 1:1)
#linear interpolation
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1))
x1<-c(1,2,3)
approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1))
#-
x1<-c(1,2,3)
y<-approxfun(x1, y = NULL, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y)
curve(y, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
1<-c(1,2,3)
y<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y)
curve(y, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
x1<-c(1,2,3)
y<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y)
curve(y, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
curve(y, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
x1<-c(1,2,3)
y1<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y1)
curve(y1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
curve(y1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
x1<-c(1,2,3)
y1<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y1)
curve(y1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
y1<-approxfun(x=NULL, y = x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
y1<-approxfun(x=x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(y1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
x1<-c(0.5,1,1,0.5)
y1<-(10,25,30,0)
f1<-approxfun(x=x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
x1<-c(0,0.5,1,1,0.5,0)
y1<-(5,10,25,30,50,60)
f1<-approxfun(x=x1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
x1<-c(0,0.5,1,1,0.5,0)
y1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,6))
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=-5, yright=20, rule = 1:1)
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1))
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1)
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1))
curve(approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1), from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1))
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1)", ylim=c(0,1))
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1)", ylim=c(0,1))
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)", ylim=c(0,1))
main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)")
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)")
main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)")
mydata<-rnorm(n=200, m=10, sd=2)
my.data<-rnorm(n=200, m=10, sd=2)
hist(my-data, main="hist of my.data")
hist(my.data, main="hist of my.data")
par(new=T)
plot(density(my.data), main="desnity estimation of my data")
plot(ecdf(my.data), main="empircal cumulative distribution functions")
qqnorm(my.data)
abline(0,1)
abline(0,1)
abline(0,10)
sd(my.data)
my.data.norm<-(my.data-mean(my.data))/sd(my.data)
qqnorm(my.data.norm)
my.data.norm<-(my.data-mean(my.data))/sd(my.data)
qqnorm(my.data.norm)
abline(0,1)
#PORBABILITY DENSITIES
# 4 figures arranged in 4 rows and 2 columns
par(mfrow=c(4, 2))
#uniform
#curve(dunif(x, min = 0, max = 1, log = FALSE))
curve(dunif(x, min = 0, max = 1), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dunif(x, min = 0, max = 1)", ylim=c(0,1))
curve(punif(x, min = 0, max = 1), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#traingular
library(triangle)
#plot(function(x) dtriangle(x, a=1, b=4, c=1.1), 0, 10)
curve(dtriangle(x, a=1, b=4, c=1.8), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dtriangle(x, a=1, b=4, c=1.8)", ylim=c(0,1))
curve(ptriangle(x, a=1, b=4, c=1.8), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#normal
#plot(function(x) dnorm(x, mean = 0, sd = 1, log = FALSE), -1, 1, main="normal, mean=0, sd=1")
#par(new=T)
#plot(function(x) dnorm(x, mean = 0, sd = 0.25, log = FALSE), -1, 1, main="normal, mean=0, sd=1",xlab='', ylab='', axes=F)
#par(new=T)
#plot(function(x) dnorm(x, mean = 0, sd = 100, log = FALSE), -1, 1, main="normal, mean=0, sd=1",xlab='', ylab='', axes=F)
curve(dnorm(x, mean = 0, sd = 0.6), from=-2, to=5, add=NA, ylab=NA, xlab = NA, main="dnorm(x, mean = 0, sd = 0.6)", ylim=c(0,1))
curve(pnorm(x, mean = 0, sd = 0.6), from=-2, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#lognorm
#plot(function(x) dlnorm(x, mean = 0, sd = 1, log = FALSE), 0, 10, main="lognormal, mean=0, sd=1")
curve(dlnorm(x, mean = 2, sd = 1), from=-1, to=40, add=NA, ylab=NA, xlab = NA, main="dlnorm(x, mean = 1, sd = 1)", ylim=c(0,1))
curve(plnorm(x, mean = 2, sd = 1), from=-1, to=40, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#logistic
#plot(function(x) dlogis(x, location = 0, scale = 1), -10, 10, main="logistic, location=0, scale=1")
curve(dlogis(x, location = 1, scale = 0.25), from=-2, to=5, add=NA, ylab=NA, xlab = NA, main="dlogis(x, location = 1, scale = 0.25)", ylim=c(0,1))
curve(plogis(x, location = 1, scale = 0.25), from=-2, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#gamma
#plot(function(x) dgamma(x, shape=1, log = FALSE))
curve(dgamma(x, shape=1, scale=1), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dgamma(x, shape=1, scale=1)", ylim=c(0,1))
#rate=1/scale
curve(pgamma(x, shape=1, scale=1), from=-1, to=5, col="blue", add=T, ylab=NA, ylim=c(0,1))
#beta
#plot(function(x) dbeta(x, shape1=1, shape2=2, ncp = 0, log = FALSE))
curve(dbeta(x, shape1=2, shape2=3, ncp = 0), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
curve(pbeta(x, shape1=2, shape2=3, ncp = 0), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1.75))
#weibull
curve(dweibull(x, shape = 1.5, scale = 1, log = FALSE), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dweibull(x, shape = 1.5, scale = 1, log = FALSE)", ylim=c(0,1))
curve(pweibull(x, shape = 1.5, scale = 1, log = FALSE), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
par(mfrow=c(1, 1))
#------------------------------------------------------------------------------------------------------------------------
#INTERPOLATIONS
#linear interpolation
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-approxfun(x=x1,y=y1, method = "linear", yleft=0, yright=0, rule = 1:1)
curve(f1, from=-5, to=80, add=NA, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)", ylim=c(0,1))
#spline interpolation
y1<-c(0,0.5,1,1,0.5,0)
x1<-c(5,10,25,30,50,60)
f1<-splinefun(x=x1,y=y1, method = c("fmm", "periodic", "natural", "monoH.FC", "hyman"), ties = mean)
curve(f1, from=-5, to=80, add=T, ylab=NA, xlab = NA, main="approxfun(x=x1,y=y1, method = linear, yleft=0, yright=0, rule = 1:1)")
#PORBABILITY DENSITIES
# 4 figures arranged in 4 rows and 2 columns
par(mfrow=c(4, 2))
#uniform
#curve(dunif(x, min = 0, max = 1, log = FALSE))
curve(dunif(x, min = 0, max = 1), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dunif(x, min = 0, max = 1)", ylim=c(0,1))
curve(punif(x, min = 0, max = 1), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#traingular
library(triangle)
#plot(function(x) dtriangle(x, a=1, b=4, c=1.1), 0, 10)
curve(dtriangle(x, a=1, b=4, c=1.8), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dtriangle(x, a=1, b=4, c=1.8)", ylim=c(0,1))
curve(ptriangle(x, a=1, b=4, c=1.8), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#normal
#plot(function(x) dnorm(x, mean = 0, sd = 1, log = FALSE), -1, 1, main="normal, mean=0, sd=1")
#par(new=T)
#plot(function(x) dnorm(x, mean = 0, sd = 0.25, log = FALSE), -1, 1, main="normal, mean=0, sd=1",xlab='', ylab='', axes=F)
#par(new=T)
#plot(function(x) dnorm(x, mean = 0, sd = 100, log = FALSE), -1, 1, main="normal, mean=0, sd=1",xlab='', ylab='', axes=F)
curve(dnorm(x, mean = 0, sd = 0.6), from=-2, to=5, add=NA, ylab=NA, xlab = NA, main="dnorm(x, mean = 0, sd = 0.6)", ylim=c(0,1))
curve(pnorm(x, mean = 0, sd = 0.6), from=-2, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#lognorm
#plot(function(x) dlnorm(x, mean = 0, sd = 1, log = FALSE), 0, 10, main="lognormal, mean=0, sd=1")
curve(dlnorm(x, mean = 2, sd = 1), from=-1, to=40, add=NA, ylab=NA, xlab = NA, main="dlnorm(x, mean = 1, sd = 1)", ylim=c(0,1))
curve(plnorm(x, mean = 2, sd = 1), from=-1, to=40, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#logistic
#plot(function(x) dlogis(x, location = 0, scale = 1), -10, 10, main="logistic, location=0, scale=1")
curve(dlogis(x, location = 1, scale = 0.25), from=-2, to=5, add=NA, ylab=NA, xlab = NA, main="dlogis(x, location = 1, scale = 0.25)", ylim=c(0,1))
curve(plogis(x, location = 1, scale = 0.25), from=-2, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
#gamma
#plot(function(x) dgamma(x, shape=1, log = FALSE))
curve(dgamma(x, shape=1, scale=1), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dgamma(x, shape=1, scale=1)", ylim=c(0,1))
#rate=1/scale
curve(pgamma(x, shape=1, scale=1), from=-1, to=5, col="blue", add=T, ylab=NA, ylim=c(0,1))
#beta
#plot(function(x) dbeta(x, shape1=1, shape2=2, ncp = 0, log = FALSE))
curve(dbeta(x, shape1=2, shape2=3, ncp = 0), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dbeta(x, shape1=1, shape2=2, ncp = 0)", ylim=c(0,1.75))
curve(pbeta(x, shape1=2, shape2=3, ncp = 0), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1.75))
#weibull
curve(dweibull(x, shape = 1.5, scale = 1, log = FALSE), from=-1, to=5, add=NA, ylab=NA, xlab = NA, main="dweibull(x, shape = 1.5, scale = 1, log = FALSE)", ylim=c(0,1))
curve(pweibull(x, shape = 1.5, scale = 1, log = FALSE), from=-1, to=5, col="blue", add=T, ylab=NA, xlab = NA, ylim=c(0,1))
par(mfrow=c(1, 1))
t_tmin <- 10
t_tmax <- 200
c_tmin <- 5
c_tmax <- 40
c_tmean <- 15
tr_temp <- function (x, t_tmin, t_tmax) {dunif(x, min = t_tmin, max =t_tmax)/dunif(x, min = t_tmin, max =t_tmax)}
cc_temp <- function (x, c_tmin, c_tmax, c_tmean) {dtriangle(x, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (tr_temp, cc_temp) {tr_temp*cc_temp}
t_app_temp_score <- integrate(app_temp, -Inf, Inf)
t_tmin <- 10
t_tmax <- 200
c_tmin <- 5
c_tmax <- 40
c_tmean <- 15
tr_temp <- function (x, t_tmin, t_tmax) {dunif(x, min = t_tmin, max =t_tmax)/dunif(x, min = t_tmin, max =t_tmax)}
cc_temp <- function (x, c_tmin, c_tmax, c_tmean) {dtriangle(x, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (tr_temp, cc_temp) {tr_temp*cc_temp}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score <- integrate(tr_temp*cc_temp, -Inf, Inf)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)/dunif(x, min = t_tmin, max =t_tmax)}
tr_temp(1)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)/dunif(x, min = t_tmin, max =t_tmax)}
tr_temp(15)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)}
tr_temp(1)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)}
tr_temp(1)
tr_temp <- function (x) {dunif(x, min = t_tmin, max =t_tmax)}
cc_temp <- function (x) {dtriangle(x, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (x) {tr_temp(x)*cc_temp(x)}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score
tr_temp <- function (t) {dunif(t, min = t_tmin, max =t_tmax)}
cc_temp <- function (t) {dtriangle(t, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (t) {tr_temp(t)*cc_temp(t)}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score
tr_temp <- function (t) {dunif(t, min = t_tmin, max =t_tmax)/dunif(t_min, min = t_tmin, max =t_tmax)}
cc_temp <- function (t) {dtriangle(t, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (t) {tr_temp(t)*cc_temp(t)}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score
tr_temp <- function (t) {dunif(t, min = t_tmin, max =t_tmax)/dunif(t_tmin, min = t_tmin, max =t_tmax)}
cc_temp <- function (t) {dtriangle(t, a = c_tmin, b = c_tmax, c = c_tmean)}
t_app_temp <- function (t) {tr_temp(t)*cc_temp(t)}
t_app_temp_score <- integrate(t_app_temp, -Inf, Inf)
t_app_temp_score
install.packages("rlist")
library(rlist)  #to manupulate/
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
which R
version
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/Appropriateness/")
#command: cd Dropbox/PHD\ Dropbox/1\ MODELLING/R/Appropriateness
library(gridExtra)
library(ColorPalette)
# Load required functions
library(triangle)
library (trapezoid)
library(rlist)  #to manupulate/filter app list
source("listread.r") # reads the csv data files for technologies and cases descriptions
source("req.functions.r") # contains functions that are not provided in R such as ranges
source("compute.app.r") # functions(tech, case) returning app.profile and app.score
source("compute.applist.r") # function(techlist, caselist, listsep=" ", filename="") making all the app profiles for a techlist and applist
source("applist.write.r") # function(applist, listsep=" ", filename="") writes applist
## ==============================================================================================
# Create the list of technology appropriateness functions and the list of case appropriateness functions
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/Appropriateness/")
#command: cd Dropbox/PHD\ Dropbox/1\ MODELLING/R/Appropriateness
library(gridExtra)
library(ColorPalette)
# Load required functions
library(triangle)
library (trapezoid)
library(rlist)  #to manupulate/filter app list
source("listread.r") # reads the csv data files for technologies and cases descriptions
source("req.functions.r") # contains functions that are not provided in R such as ranges
source("compute.app.r") # functions(tech, case) returning app.profile and app.score
source("compute.applist.r") # function(techlist, caselist, listsep=" ", filename="") making all the app profiles for a techlist and applist
source("applist.write.r") # function(applist, listsep=" ", filename="") writes applist
## ==============================================================================================
# Create the list of technology appropriateness functions and the list of case appropriateness functions
techlist_daniel<- build.list("techdata_daniel.csv",3)
caselist<- build.list("casedata.csv",2)
caselist_daniel<- build.list("casedata_daniel.csv",2)
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/Appropriateness/")
#command: cd Dropbox/PHD\ Dropbox/1\ MODELLING/R/Appropriateness
library(gridExtra)
library(ColorPalette)
# Load required functions
library(triangle)
library (trapezoid)
library(rlist)  #to manupulate/filter app list
source("listread.r") # reads the csv data files for technologies and cases descriptions
source("req.functions.r") # contains functions that are not provided in R such as ranges
source("compute.app.r") # functions(tech, case) returning app.profile and app.score
source("compute.applist.r") # function(techlist, caselist, listsep=" ", filename="") making all the app profiles for a techlist and applist
source("applist.write.r") # function(applist, listsep=" ", filename="") writes applist
## ==============================================================================================
# Create the list of technology appropriateness functions and the list of case appropriateness functions
techlist<- build.list("techdata.csv",3)
#techlist_daniel<- build.list("techdata_daniel.csv",3)
#str(techlist)
caselist<- build.list("casedata.csv",2)
#caselist_daniel<- build.list("casedata_daniel.csv",2)
#str(caselist)
#-------------------------------------------
# Some guidelines to fill in the data files:
#------------------------------------------
# Each data files contines a list of items (either techs or cases in the columns)
# Each items has some attributes (lines)
# The first attributes are just information, that helps to understand the case or is needed for later on
# Then the appropriateness attributes are listed
# Each attribute goes over three lines:
# 1 Name of the attributes to be used: bod, water, temp, omskil, etc.
# 2 Name of function of function (see below) describing the technology/case requirement/capactiy
# 3 Parameters required for this function
# Recommended functions are:
# req.range(x, lower=-Inf, upper=Inf)
# req.trapez(x, a, b, c, d),
# dtriangle(x, a, b, c)
# dtrapezoid(x, min, mode1, mode2, max )
# dunif(x, min, max)
# dnorm, dlnorm, dbeta, dweibull, dgamma, dlogis, etc.
## ==============================================================================================
# Compute appropriateness profiles (app.profile(tech, case)) and apppropriateness scores (app.scores(tech, case))
# For single examples: a pair of (caselist$case, techlist$tech)
cat("====== Using compute.app ================= \n")
# Create empty list
applist1=list()
# Compute examples
app.item.tmp <- compute.app(caselist$arbaminch, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.app(caselist$thimi, techlist$septic.tank,lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.app(caselist$arbaminch, techlist$single.pit, lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
app.item.tmp <- compute.app(caselist$arbaminch, techlist$double.pit, lshowplot = TRUE)
applist1=append(applist1,list(app.item.tmp))
# Print examples
print(t(app.item.tmp), digits=4)  #optionally app.septic.tank[1:3] for tech, case, score, can't print the tech.app.profile as it is list in list
# For enitre applists and techlists: a pair of (caselist, techlist)
cat("====== Using compute.applist ================= \n")
applist2<-compute.applist(caselist,techlist,lsort=TRUE)
#applist_daniel<-compute.applist(caselist_daniel,techlist_daniel,lsort=TRUE)
## ==============================================================================================
# Applist displays
# Write to screen
applist.write(applist2)
# Write to file
applist.write(applist2, listsep=";", filename="app_list2.csv")
## ==============================================================================================
# Use rlist to filter
applist<-applist2
# Example only arbaminch
sub.applist=list.filter(applist,case=="arbaminch")
cat("====================== \n")
cat("Only arbaminch  \n")
applist.write(sub.applist)
# Example only arbaminch and score > 0
sub.applist=list.filter(applist,case=="arbaminch", tech.app.score>0)
cat("====================== \n")
cat("Only arbaminch and score > 0 \n")
applist.write(sub.applist)
# Examples of manipulations
sub.applist=list.filter(applist,case=="arbaminch", tech=="single.pit")
sub.applist[[1]]$tech.app.profile$bod
# using $ instead of list.filter
applist[[1]]$tech.app.profile$bod # to get the bod of an item in the list, 1 ist the list id
techlist_daniel<- build.list("techdata_daniel.csv",3)
rm(list=ls())
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/Appropriateness/")
#command: cd Dropbox/PHD\ Dropbox/1\ MODELLING/R/Appropriateness
library(gridExtra)
library(ColorPalette)
# Load required functions
library(triangle)
library (trapezoid)
library(rlist)  #to manupulate/filter app list
source("listread.r") # reads the csv data files for technologies and cases descriptions
source("req.functions.r") # contains functions that are not provided in R such as ranges
source("compute.app.r") # functions(tech, case) returning app.profile and app.score
source("compute.applist.r") # function(techlist, caselist, listsep=" ", filename="") making all the app profiles for a techlist and applist
source("applist.write.r") # function(applist, listsep=" ", filename="") writes applist
## ==============================================================================================
# Create the list of technology appropriateness functions and the list of case appropriateness functions
techlist<- build.list("techdata.csv",3)
#techlist_daniel<- build.list("techdata_daniel.csv",3)
#str(techlist)
caselist<- build.list("casedata.csv",2)
#caselist_daniel<- build.list("casedata_daniel.csv",2)
#str(caselist)
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/Appropriateness/")
#command: cd Dropbox/PHD\ Dropbox/1\ MODELLING/R/Appropriateness
library(gridExtra)
library(ColorPalette)
# Load required functions
library(triangle)
library (trapezoid)
library(rlist)  #to manupulate/filter app list
source("listread.r") # reads the csv data files for technologies and cases descriptions
source("req.functions.r") # contains functions that are not provided in R such as ranges
source("compute.app.r") # functions(tech, case) returning app.profile and app.score
source("compute.applist.r") # function(techlist, caselist, listsep=" ", filename="") making all the app profiles for a techlist and applist
source("applist.write.r") # function(applist, listsep=" ", filename="") writes applist
## ==============================================================================================
# Create the list of technology appropriateness functions and the list of case appropriateness functions
techlist<- build.list("techdata.csv",3)
#techlist_daniel<- build.list("techdata_daniel.csv",3)
#str(techlist)
caselist<- build.list("casedata.csv",2)
#caselist_daniel<- build.list("casedata_daniel.csv",2)
#str(caselist)
applist2<-compute.applist(caselist,techlist,lsort=TRUE)
techlist_daniel<- build.list("techdata_daniel.csv",3)
caselist_daniel<- build.list("casedata_daniel.csv",2)
## ==============================================================================================
# Use data from Daniel
caselist_daniel<- build.list("casedata_daniel.csv",2)
techlist_daniel<- build.list("techdata_daniel.csv",3)
applist_daniel<-compute.applist(caselist_daniel,techlist_daniel,lsort=TRUE)
## ==============================================================================================
# Use data from Daniel
caselist_daniel<- build.list("casedata_daniel.csv",2)
techlist_daniel<- build.list("techdata_daniel.csv",3)
applist_daniel<-compute.applist(caselist_daniel,techlist_daniel,lsort=TRUE)
caselist_test<- build.list("casedata_test.csv",2)
techlist_test<- build.list("techdata_test.csv",3)
applist_test<-compute.applist(caselist_test,techlist_test,lsort=TRUE)
applist.write(applist_test)
caselist_test<- build.list("casedata_test.csv",2)
techlist_test<- build.list("techdata_test.csv",3)
applist_test<-compute.applist(caselist_test,techlist_test,lsort=TRUE)
caselist_test<- build.list("casedata_test.csv",2)
techlist_test<- build.list("techdata_test.csv",3)
applist_test<-compute.applist(caselist_test,techlist_test,lsort=TRUE)
caselist_test<- build.list("casedata_test.csv",2)
techlist_test<- build.list("techdata_test.csv",3)
applist_test<-compute.applist(caselist_test,techlist_test,lsort=TRUE)
caselist_test<- build.list("casedata_test.csv",2)
techlist_test<- build.list("techdata_test.csv",3)
applist_test<-compute.applist(caselist_test,techlist_test,lsort=TRUE)
caselist_test<- build.list("casedata_test.csv",2)
techlist_test<- build.list("techdata_test.csv",3)
applist_test<-compute.applist(caselist_test,techlist_test,lsort=TRUE)
caselist_test<- build.list("casedata_test.csv",2)
techlist_test<- build.list("techdata_test.csv",3)
applist_test<-compute.applist(caselist_test,techlist_test,lsort=TRUE)
warnings()
caselist_test<- build.list("casedata_test.csv",2)
techlist_test<- build.list("techdata_test.csv",3)
applist_test<-compute.applist(caselist_test,techlist_test,lsort=TRUE)
