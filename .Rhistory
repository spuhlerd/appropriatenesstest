curve(dtriangle(x, a=0, b=2, c=1), xlim=c(-0.1,24), ylim=c(0,0.2))
library(triangle) # extra package for triangular distribution
curve(dtriangle(x, a=0, b=2, c=1), xlim=c(-0.1,24), ylim=c(0,0.2))
curve(dtriangle(x, a=0, b=2, c=1), xlim=c(-0.1,2), ylim=c(0,10))
m(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
## ==============================================================================================
# SOME GUIDELINES TO FILL IN DATA LIST FILES (techdata and casedata)
#------------------------------------------
# Each data files contains a list of items (either techs or cases in the columns)
# Each items has a few information attributes (info.rows), build.list automatically detects the number of info rows, so you do not need to provide this.
# This is followed by a list of appropriateness attributes (attr1,...., attrn).
# Info rows can be used to provide comments about the case or the technology.
# For Technologies, the info.rows are also used to provide the functional groups and the products which are used to generate sanitation systems by a different model module.
# Predefined functional groups:
# User interface (U), Collection and Storage (S), Conveyance (C), (Semi-)centralized Treatement (T), Reuse and/or Disposal (D) (see also http://ecompendium.sswm.info)
# Pre-defined poducts:
# urine, faeces, excreta, blackwater, greywater, stormwater, storedurine, driedfaeces, pit humus, compost, sludge, effluent, stabilizedsludge, secondaryeffluent, biogas
# Appropriateness attributes are defined by three rows:
# 1 Name of the attributes: e.g. bod, water, temp, omskil, etc.
# 2 Name of attribute appropriateness function describing the technology/case requirement/capactiy
# 3 Parameters required for this function
# Each distinct attriute is described by a pair of functions, one for the case and one for the tech.
# !!! A pair has always to consits of one density function ('d...') and one distribution function ('p...')
# Which of the two functions is used to describe the case or the technology attribute value can vary
# Generally density functions are used to describe probability that the attribute takes a certain value (e.g. temperature)
# ... and distribution functions are used to describe the performance given the attribute (e.g. the performance of a technology given a certain temperature)
# Recommended functions are:
# p or drange(x, lower=-Inf, upper=Inf)
# p or dtrapez(x, a, b, c, d),
# dtriangle(x, a, b, c)
# dunif(x, min, max)
# dcat(x, probs)  # probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# Other that might work are: dnorm, dlnorm, dbeta, dweibull, dgamma, dlogis, etc.
## ==============================================================================================
## ==============================================================================================
## EXAMPLES ON HOW TO USE THE MODEL TO EVALUATE TE APPROPRIATENESS OF TECHNOLOGIES IN SPEC.CASES
## ==============================================================================================
# READ THE DATA INPUT FILES USING Bbuild.list TO GENERATE A TECHNOLOGY AND A CASE LIST
caselist_demo<- build.list("casedata_demo.csv")
techlist_demo<- build.list("techdata_demo.csv")
applist_demo<-compute.techapplist(caselist_demo,techlist_demo, lpdfplot = T) # use lshowplot=F if
