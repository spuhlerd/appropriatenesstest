hist(techappscores,xlim=c(0,1))
hist(techapp.score ~ functional.group,data=techappframe_katarnyia_DS )
boxplot(techapp.score ~ functional.group,data=techappframe_katarnyia_DS )
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) +
geom_histogram() + facet_wrap( ~ functional.group)
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
library(ggplot2)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapp
source("techapplist.frame.R")
source("techapplist.frame.R")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-03.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarniya_DS-03.csv")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-03.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarniya_DS-03.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techapplist.write(techapplist_katarnyia_DS, listsep=";", filename="output/didac/Techapplist_Katarniya_DS-03.csv")
techapplist.write(techapplist_katarnyia_DS, listsep=";", filename="output/didac/Techapplist_Katarniya_DS-03.csv")
write.table(techappframe_katarnyia_DS, file = "outputdidac/Techappframe_katarnyia_DS-03.csv", sep = ";",row.names=F)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
write.table(techappframe_katarnyia_DS, file = "outputdidac/Techappframe_katarnyia_DS-03.csv", sep = ";",row.names=F)
write.table(techappframe_katarnyia_DS, file = "output/didac/Techappframe_katarnyia_DS-03.csv", sep = ";",row.names=F)
# using ggplot
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) +
geom_histogram() + facet_wrap( ~ functional.group)
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_full.csv")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya-full.csv")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarniya_DS-03.csv")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarniya_DS-full.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarniya_DS-full.csv")
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
library(ggplot2)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarniya_DS-full.csv")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarniya_DS-full.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarniya_DS-full.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarnyia_DS-full.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
write.table(techappframe_katarnyia_DS, file = "output/didac/Techappframe_katarnyia_DS-full.csv", sep = ";",row.names=F)
View(techappframe_katarnyia_DS)
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full-mod.csv")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full-mod.csv")
techapplist_katarnyia_DSmod<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full-mod.csv")
techapplist_katarnyia_DSmod<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full-mod.csv")
techapplist_katarnyia_DSmod<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full-mod.csv")
techapplist_katarnyia_DSmod<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full-mod.csv")
techapplist_katarnyia_DSmod<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full-mod2.csv")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-full-mod2.csv")
techapplist_katarnyia_DSmod<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
library(ggplot2)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-01.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarnyia_DS-full.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
#convert to dataframe and write to csv
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
View(techappframe_katarnyia_DS)
# using ggplot
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) +
geom_histogram() + facet_wrap( ~ functional.group)
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
ssdsa
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-01.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarnyia_DS-full.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) +
geom_histogram() + facet_wrap( ~ functional.group)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) +
geom_histogram()
View(techappframe_katarnyia_DS)
write.table(techappframe_katarnyia_DS, file = "output/didac/Techappframe_katarnyia_DS-01.csv", sep = ";",row.names=F)
write.table(techappframe_katarnyia_DS, file = "output/didac/Techappframe_katarnyia_DS-01.csv", sep = ";",row.names=F)
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
library(ggplot2)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-01.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarnyia_DS-full.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
write.table(techappframe_katarnyia_DS, file = "output/didac/Techappframe_katarnyia_DS-01-2.csv", sep = ";",row.names=F)
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
library(ggplot2)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-01.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarnyia_DS-full.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techapplist_katarnyia_DS2<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
#convert to dataframe and write to csv
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
View(techappframe_katarnyia_DS)
techappframe_katarnyia_DS2=techapplist.frame(techapplist_katarnyia_DS2,techlist_katarnyia_DS, caselist_katarnyia_DS)
View(techappframe_katarnyia_DS2)
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
library(ggplot2)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-01.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarnyia_DS-full.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
#convert to dataframe and write to csv
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
View(techappframe_katarnyia_DS)
write.table(techappframe_katarnyia_DS, file = "output/didac/Techappframe_katarnyia_DS-01.csv", sep = ";",row.names=F)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) +
geom_histogram() + facet_wrap( ~ functional.group)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram()
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group)
write.table(techappframe_katarnyia_DS, file = "output/didac/Techappframe_katarnyia_DS-01.csv", sep = ";",row.names=F)
write.table(techappframe_katarnyia_DS, file = "output/didac/Techappframe_katarnyia_DS-01.csv", sep = ";",row.names=F)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram()
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group)
techappframe_katarnyia_DS$functional.group_f = factor(techappframe_katarnyia_DS$functional.group, levels=c('U','S','C','T','D'))
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group) + facet_grid(.~functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group) + facet_grid(~functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group_f) #+ facet_grid(.~functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group)
techappframe_katarnyia_DS$functional.group_f = factor(techappframe_katarnyia_DS$functional.group, levels=c('U','Uadd','C','T','D'))
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group)
techappframe_katarnyia_DS$functional.group_f = factor(techappframe_katarnyia_DS$functional.group, levels=c('U','Uadd','S','C','T','D'))
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group_f)
g
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group)
techappframe_katarnyia_DS$functional.group_f = factor(techappframe_katarnyia_DS$functional.group, levels=c('U','Uadd','S','C','T','D'))
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram() + facet_wrap( ~ functional.group_f)
echappframe_katarnyia_DS$functional.group_f = factor(techappframe_katarnyia_DS$functional.group, levels=c('U','Uadd','S','C','T','D'))
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, color=factor(functional.group))) + geom_histogram() + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, color=functional.group)) + geom_histogram() + facet_wrap( ~ functional.group_f)
techappframe_katarnyia_DS$functional.group_f = factor(techappframe_katarnyia_DS$functional.group, levels=c('U','Uadd','S','C','T','D'))
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, color=functional.group, show.legend=F)) + geom_histogram() + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, color=functional.group, show.legend=F)) + geom_histogram() + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, color=functional.group)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram(show.legend=F,color=functional.group) + facet_wrap( ~ functional.group_f)
techappframe_katarnyia_DS$functional.group_f = factor(techappframe_katarnyia_DS$functional.group, levels=c('U','Uadd','S','C','T','D'))
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram(show.legend=F,color=functional.group) + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram(show.legend=F, color=functional.group) + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, colour=functional.group)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, colour=functional.group)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f, colour=functional.group)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f, color=functional.group)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group)) + geom_histogram(show.legend=F)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group)) + geom_histogram()
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group)) + geom_histogram(~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group)) + geom_histogram(~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group)) + geom_histogram(functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group, order=functional.group)) + geom_histogram()
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group, order=functional.group_f)) + geom_histogram()
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group, order=functional.group)) + geom_histogram()
ggplot(arrange(techappframe_katarnyia_DS, functional.group_f, aes(x=techapp.score, fill=functional.group)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group, order=functional.group)) + geom_histogram()
# histogram using an intermediate variable
techappscores<- techappframe_katarnyia_DS$techapp.score
hist(techappscores,xlim=c(0,1))
# boxplot using directly the techappframe
boxplot(techapp.score ~ functional.group,data=techappframe_katarnyia_DS )
<<<<<<< HEAD
=======
## ==============================================================================================
##@@@@@@@@@@@@@@@@@@@@@@@@ joel test
library(triangle)
library (trapezoid)
library(rlist)
library(gridExtra)
library(ColorPalette)
source("build.list.r")
source("appfunctions.r")
source("mc.integrate.r")
source("compute.techappscore.r")
source("compute.techapplist.r")
source("techapplist.write.r")
source("build.syslist.r")
source("sysapplist.write.r")
caselist<- build.list("AppCase_Maria.csv")
techlist<- build.list("TechOp_Maria.csv")
syslist<- build.syslist("sysdata_demo.csv")
source("compute.sysapplist.r")
sysapplist<-compute.sysapplist(syslist,caselist,techlist,lsort=T,lshowplot=F,lpdfplot=F,aggmethod="mean")
sysapplist.write(sysapplist)
# Write to screen
techapplist<-compute.techapplist(caselist,techlist,lsort=TRUE,lshowplot=F,lpdfplot=F,aggmethod="mean")
source("techapplist.write.r")
techapplist.write(techapplist, listsep=";", filename="techapplist_maria.csv")
compute.techappscore(caselist$arbaminch,techlist$dry.toilet, lshowplot=F,lpdfplot=F,aggmethod = "product")
################   Joel sesitivity
source("compute_sensitivity.R")
sensitivity_100 <- compute_sensitivity(num_of_runs=1,aggmethod="mean",case="arbaminch1", n.sample=100)
>>>>>>> d657d32a098ea0d020f79d9604f7c1efc8040ef9
ggplot(arrange(techappframe_katarnyia_DS), functional.group_f, aes(x=techapp.score, fill=functional.group)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f)
ggplot(arrange(techappframe_katarnyia_DS, functional.group_f), aes(x=techapp.score, fill=functional.group)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group, order=functional.group)) + geom_histogram()
techappframe_katarnyia_DS2=read("output/didac/Techappframe_katarnyia_DS-01.csv", sep = ";",row.names=F)
techappframe_katarnyia_DS2=read.csv("output/didac/Techappframe_katarnyia_DS-01.csv", sep = ";",row.names=F)
techappframe_katarnyia_DS2=read.csv("output/didac/Techappframe_katarnyia_DS-01.csv", sep = ";")
View(techappframe_katarnyia_DS2)
View(techappframe_katarnyia_DS)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group, order=functional.group)) + geom_histogram()
# histogram using an intermediate variable
techappscores<- techappframe_katarnyia_DS$techapp.score
hist(techappscores,xlim=c(0,1))
hist(techappframe_katarnyia_DS$techapp.score,xlim=c(0,1))
boxplot(techapp.score ~ functional.group,data=techappframe_katarnyia_DS )
boxplot(techapp.score ~ functional.group_f,data=techappframe_katarnyia_DS )
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group_f, order=functional.group_f)) +
geom_boxplot()
ggplot(techappframe_katarnyia_DS, aes(y=techapp.score, fill=functional.group_f, order=functional.group_f)) +
geom_boxplot()
ggplot(techappframe_katarnyia_DS, aes(y=techapp.score, y=functional.group_f, fill=functional.group_f) +
geom_boxplot()
)
ggplot(techappframe_katarnyia_DS, aes(y=techapp.score, y=functional.group_f, fill=functional.group_f)) +
geom_boxplot()
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, y=functional.group_f, fill=functional.group_f)) +
geom_boxplot()
ggplot(techappframe_katarnyia_DS, aes(y=techapp.score, x=functional.group_f, fill=functional.group_f)) +
geom_boxplot()
techappframe_katarnyia_DS[1,]
techappframe_katarnyia_DS[1,1]
techappframe_katarnyia_DS[1]
techappframe_katarnyia_DS
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
library(ggplot2)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
## ==============================================================================================
# SOME GUIDELINES TO FILL IN DATA LIST FILES (techdata and casedata)
#------------------------------------------
# Each data files contains a list of items (either techs or cases in the columns)
# Each items has a few information attributes (info.rows), build.list automatically detects the number of info rows, so you do not need to provide this.
# This is followed by a list of appropriateness attributes (attr1,...., attrn).
# Info rows can be used to provide comments about the case or the technology.
# For Technologies, the info.rows are also used to provide the functional groups and the products which are used to generate sanitation systems by a different model module.
# Predefined functional groups:
# User interface (U), Collection and Storage (S), Conveyance (C), (Semi-)centralized Treatement (T), Reuse and/or Disposal (D) (see also http://ecompendium.sswm.info)
# Pre-defined poducts:
# urine, faeces, excreta, blackwater, greywater, stormwater, storedurine, driedfaeces, pit humus, compost, sludge, effluent, stabilizedsludge, secondaryeffluent, biogas
# Appropriateness attributes are defined by three rows:
# 1 Name of the attributes: e.g. bod, water, temp, omskil, etc.
# 2 Name of attribute appropriateness function describing the technology/case requirement/capactiy
# 3 Parameters required for this function
# Each distinct attriute is described by a pair of functions, one for the case and one for the tech.
# !!! A pair has always to consits of one density function ('d...') and one distribution function ('p...')
# Which of the two functions is used to describe the case or the technology attribute value can vary
# Generally density functions are used to describe probability that the attribute takes a certain value (e.g. temperature)
# ... and distribution functions are used to describe the performance given the attribute (e.g. the performance of a technology given a certain temperature)
# Recommended functions are:
# p or drange(x, lower=-Inf, upper=Inf)
# p or dtrapez(x, a, b, c, d),
# dtriangle(x, a, b, c)
# dunif(x, min, max)
# dcat(x, probs)  # probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# Other that might work are: dnorm, dlnorm, dbeta, dweibull, dgamma, dlogis, etc.
techlist_katarnyia_DS<- build.list("input/didac/Techdata_Katarniya_DS-01.csv")
caselist_katarnyia_DS<- build.list("input/didac/Casedata_Katarnyia_DS-full.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
# -- define order of functional groups
techappframe_katarnyia_DS$functional.group_f = factor(techappframe_katarnyia_DS$functional.group, levels=c('U','Uadd','S','C','T','D'))
# -- plot histogram of tech app scores per functional group
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group)) + geom_histogram(show.legend=F) + facet_wrap( ~ functional.group_f)
# -- plot histogram of all tech app scores (coloured per functional group)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score, fill=functional.group_f, order=functional.group_f)) + geom_histogram()
# --simple plots
hist(techappframe_katarnyia_DS$techapp.score,xlim=c(0,1))
boxplot(techapp.score ~ functional.group_f,data=techappframe_katarnyia_DS )
ggplot(techappframe_katarnyia_DS, aes(y=techapp.score, x=functional.group_f, fill=functional.group_f)) +
geom_boxplot()
techappframe_katarnyia_DS
