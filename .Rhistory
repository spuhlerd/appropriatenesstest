curve(dtriangle(x, a=0, b=2, c=1), xlim=c(-0.1,24), ylim=c(0,0.2))
library(triangle) # extra package for triangular distribution
curve(dtriangle(x, a=0, b=2, c=1), xlim=c(-0.1,24), ylim=c(0,0.2))
curve(dtriangle(x, a=0, b=2, c=1), xlim=c(-0.1,2), ylim=c(0,10))
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
curve(dtriangle(x, a=0, b=2, c=1), xlim=c(-0.1,2), ylim=c(0,10))
curve(dtriangle(x, a=0, b=365, c=000.1), xlim=c(-0.1,370), ylim=c(0,1.2))
curve(dtriangle(x, a=0, b=365, c=000.1), xlim=c(-0.1,370), ylim=c(0,0.2))
curve(ptriangle(x, a=0, b=365, c=000.1), xlim=c(-0.1,370), ylim=c(0,0.2))
curve(ptriangle(x, a=0, b=365, c=000.1), xlim=c(-0.1,370), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=365, c=1), xlim=c(-0.1,370), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=365, c=10), xlim=c(-0.1,370), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=365, c=365), xlim=c(-0.1,370), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=365, c=365), xlim=c(-0.1,400), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=2, c=1), xlim=c(-0.1,400), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=2, c=1), xlim=c(-0.1,1), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=1, c=2), xlim=c(-0.1,1), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=2, c=2), xlim=c(-0.1,1), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=365, c=365), xlim=c(-0.1,365), ylim=c(0,1.2))
curve(ptriangle(x, a=0, b=365, c=0), xlim=c(-0.1,365), ylim=c(0,1.2))
curve(ptrapez(x, a=0, b=1, c=2, c=3), xlim=c(-0.1,4), ylim=c(0,1.2))
curve(ptrapez(x, a=0, b=1, c=2, d=3), xlim=c(-0.1,4), ylim=c(0,1.2))
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
techlist_katarnyia_DS<- build.list("didac/Techdata_Katarniya_DS-03.csv")
caselist_katarnyia_DS<- build.list("didac/Casedata_Katarniya_DS-03.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,caselist_katarnyia_DS)
View(techappframe_katarnyia_DS)
View(techappframe_katarnyia_DS)
write.table(techappframe_katarnyia_DS, file = "didac/Techappframe_katarnyia_DS-03.csv", sep = ";",row.names=F)
a<-techappframe_katarnyia_DS$techapp.score
a
a<-techappframe_katarnyia_DS[:1]
a<-techappframe_katarnyia_DS[;:1]
a<-techappframe_katarnyia_DS[.:1]
a<-techappframe_katarnyia_DS[;1]
a<-techappframe_katarnyia_DS[1]
a
a<-techappframe_katarnyia_DS[2:3]
a
techappscores<- techappframe_katarnyia_DS[2:3]
hist(techappscores)
hist(techappscores[2])
techappscores[2]
techapplist_katarnyia_DS$techapp.scores
techapplist_katarnyia_DS[[techapp.scores]]
techapplist_katarnyia_DS
techapplist_katarnyia_DS[[techapp.score]]
techapplist_katarnyia_DS$techapp.score
techapp.score <- sapply(techapplist,function(z) z$techapp.score)
techapp.score <- sapply(techapplist_katarnyia_DS,function(z) z$techapp.score)
hist(techapp.score)
hist(techapp.score,xlim=c(0,1))
techlist=techapplist_katarnyia_DS
techlist
techlist=techlist_katarnyia_DS
techlist
fu=techlist[[functional.group]]
techlist
fu=techlist[[functional.group]]
techlist
techlist$tech[[functional.group]]
techlist[[techname]]
tech=techlist[[techname]]
techlist[1]
techlist[[techname]]
techlist[[1]]
techlist
techlist$uddt
techlist[[functional.group]]
tech.fu <- sapply(techlist,function(z) z$functional.group)
tech.fu
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,caselist_katarnyia_DS)
View(techappframe_katarnyia_DS)
source("techapplist.frame.R")
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,caselist_katarnyia_DS)
View(techappframe_katarnyia_DS)
source("techapplist.frame.R")
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,caselist_katarnyia_DS)
View(techappframe_katarnyia_DS)
tech.fu <- sapply(techlist,function(z) z$functional.group)
tech.fu <- sapply(techlist,function(z) z$functional.group)[2]
tech.fu
tech.fu <- sapply(techlist,function(z) z$functional.group)
tech.fu <- sapply(techlist,function(z) z$functional.group)[2:]
tech.fu <- sapply(techlist,function(z) z$functional.group)[2;]
tech.fu <- sapply(techlist,function(z) z$functional.group)[,2]
tech.fu <- sapply(techlist,function(z) z$functional.group)[:2]
tech.fu[1]
tech.fu[,1]
tech.fu[:1]
tech.fu[;1]
tech.fu[.1]
tech.fu
tech.fu[2,]
dim(tech.fu)
tech.fu[[2]]
tech.fu[[3]]
tech.fu[[2,]]
tech.fu[[,2]]
tech.fu[[1:end]]
tech.fu[[1:10]]
tech.fu[[functional.group]]
tech.fu[[1]]
tech.fu[[2]]
tech.fu1 <- sapply(techlist,function(z) z$functional.group)
tech.fu2 <- sapply(tech.fu1,function(z) z$functional.group)
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
techlist_katarnyia_DS<- build.list("didac/Techdata_Katarniya_DS-03.csv")
caselist_katarnyia_DS<- build.list("didac/Casedata_Katarniya_DS-03.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,caselist_katarnyia_DS)
View(techappframe_katarnyia_DS)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
rm(list=ls())
## ==============================================================================================
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
# Load required library packages
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
# Load required functions
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
# build.list(filename,n.info.row)
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
# prange(x, lower=-Inf, upper=Inf)
# drange(x, lower=-Inf, upper=Inf)
# rrange(x, lower=-Inf, upper=Inf)
# ptrapez(x, a, b=(d-a)/2+a, c=b, d)
# dtrapez(x, a, b=(d-a)/2+a, c=b, d)
# rtrapez(x, a, b=(d-a)/2+a, c=b, d)
# pcat(x, probs)
# dcat(x, probs), probs is the vector of categories and respective probabilities. E.g. c(no=0.4,yes=0.6)
# !!! the sum of probs has to be =1
# rcat(x, probs)
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
# mc.integrate(case.app.fun, tech.app.fun, n.sample=10000)
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
# compute.techappscore(tech, case,lshowplot=FALSE)
# plots provide a graphical representaiton of the two functions and the overall
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
# compute.techapplist(techlist, caselist, listsep=" ", filename="")
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
# function(applist, listsep=" ", filename="")
source("compute.sysapplist.r")
source("techapplist.frame.R")
techlist_katarnyia_DS<- build.list("didac/Techdata_Katarniya_DS-03.csv")
caselist_katarnyia_DS<- build.list("didac/Casedata_Katarniya_DS-03.csv")
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
techlist_katarnyia_DS<- build.list("didac/Techdata_Katarniya_DS-03.csv")
caselist_katarnyia_DS<- build.list("didac/Casedata_Katarniya_DS-03.csv")
techapplist_katarnyia_DS<-compute.techapplist(caselist_katarnyia_DS,techlist_katarnyia_DS)
techapplist.write(techapplist_katarnyia_DS)
techappframe_katarnyia_DS=techapplist.frame(techapplist_katarnyia_DS,techlist_katarnyia_DS, caselist_katarnyia_DS)
View(techappframe_katarnyia_DS)
techappscores<- techappframe_katarnyia_DS$techapp.score
hist(techappscore,xlim=c(0,1))
techappscores<- techappframe_katarnyia_DS$techapp.score
hist(techappscore,xlim=c(0,1))
techappscores
hist(techapp.score˜funcional.group,data=techappframe_katarnyia_DS )
?lm
hist(techapp.score ~ funcional.group,data=techappframe_katarnyia_DS )
hist( funcional.group ~ techapp.score,data=techappframe_katarnyia_DS )
str(techappframe_katarnyia_DS)
boxplot( funcional.group ~ techapp.score,data=techappframe_katarnyia_DS )
boxplot( functional.group ~ techapp.score,data=techappframe_katarnyia_DS )
boxplot(techapp.score ~ functional.group,data=techappframe_katarnyia_DS )
techappscores
install.packages("ggplot2")
library(ggplot)
library(ggplot2)
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) +
geom_histogram(binwidth=.5, position="dodge")
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) +
geom_histogram()
ggplot(techappframe_katarnyia_DS, aes(x=techapp.score)) +
geom_histogram() + facet_wrap( ~ functional.group)
techappscores<- techappframe_katarnyia_DS$techapp.score
hist(techappscore,xlim=c(0,1))
techappscores<- techappframe_katarnyia_DS$techapp.score
hist(techappscore,xlim=c(0,1))
techappscores
hist(techappscore,xlim=c(0,1))
hist(techappscores,xlim=c(0,1))
getwed()
getwd()
