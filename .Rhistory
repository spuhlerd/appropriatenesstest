rm(list=ls())
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
setwd("/Users/dorotheespuhler/Dropbox\ (Personal)/PHD\ Dropbox/1\ MODELLING/R/AppropriatenessDorothee/Appropriateness/")
library(triangle) # extra package for triangular distribution
library (trapezoid) # extra package for trapezoidial distribution
library(rlist)  # extra package to manupulate/filter app list
library(gridExtra)
library(ColorPalette)
source("build.list.r")   # This function reads the technology and case input data stored in a csv file...
source("build.syslist.r")
source("appfunctions.r") # contains functions that are not provided in R but can be used to compute attribute values
source("mc.integrate.r") # This functions computes a monte carlo integration of two continous functions
source("compute.techappscore.r") # Returns app.profile and app.score (aggregated profile)
source("compute.techapplist.r") # Returns a list of app.profiles & app.score for all the techs and caes of a techlist and caseplist
source("techapplist.write.r") # writes applist either to screen or to a file if listsep and filename are provided
source("compute.sysapplist.r")
caselist_demo<- build.list("casedata_demo.csv")
techlist_demo<- build.list("techdata_demo.csv")
applist_demo=list()
app.item.tmp <- compute.techapp(caselist_demo$arbaminch, techlist_demo$uddt,lshowplot = TRUE)
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$uddt,lshowplot = TRUE)
# Using compute.techapp
applist_demo=list()
#arbaminch
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$uddt,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$dry.toilet,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$pour.flush,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$urine.storagetank,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$dehydration.vault,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$septic.tank,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$single.pit,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$double.pit,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$application.urine,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$application.faeces,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$testech,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$arbaminch, techlist_demo$application.compost,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
#thimi
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$uddt,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$dry.toilet,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$pour.flush,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$urine.storagetank,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$dehydration.vault,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$septic.tank,lshowplot = TRUE)
#provides an error as for the attr electricity thimi has dtriangle; while septic.tank has a pcat function
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$single.pit,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$double.pit,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$application.urine,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$application.faeces,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$testech,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
app.item.tmp <- compute.techappscore(caselist_demo$thimi, techlist_demo$application.compost,lshowplot = TRUE)
applist_demo=append(applist_demo,list(app.item.tmp))
techapplist.write(applist_demo)
applist_demo<-compute.techapplist(caselist_demo,techlist_demo, lpdfplot = T) # use lshowplot=F if
techapplist.write(applist_demo)
techapplist.write(applist_demo, listsep=";", filename="app_list_demo.csv") #giving a list separation charachter and a filename creates a csv file with the results
applist<-applist_demo
sub.applist=list.filter(applist,case=="arbaminch")
cat("====================== \n") # Insert line for better lisibility
cat("Only arbaminch  \n") # Provide a title to the table
techapplist.write(sub.applist) # Write the sublist to the screen with techapplist.write
sub.applist=list.filter(applist,case=="arbaminch", techapp.score>0)
cat("====================== \n")
cat("Only arbaminch and score > 0 \n")
techapplist.write(sub.applist)
sub.applist=list.filter(applist,case=="arbaminch", tech=="dry.toilet") # provides only the results
sub.applist=list.filter(applist,case=="arbaminch", tech=="dry.toilet") # provides only the results
sub.applist[[1]]$techapp.profile$temp # [[1]] stands for the first instance of the sublist for dry
curve(dunif(x, min = 0, max = 1, log = FALSE))
curve(dunif(x, min = 0, max = 1, log = FALSE),from = -0.1, to = 1.2)
curve(dunif(x, min = 0, max = 1, log = FALSE),from = -0.1, to = 1.2, xlim=1.2)
curve(dunif(x, min = 0, max = 1, log = FALSE),from = -0.1, to = 1.2, ylim=1.2)
curve(dunif(x, min = 0, max = 1, log = FALSE),from = -0.1, to = 1.2, ylim=3)
curve(dunif(x, min = 0, max = 1, log = FALSE),from = -0.1, to = 1.2, ylim=(0,1.2))
curve(dunif(x, min = 0, max = 1, log = FALSE),from = -0.1, to = 1.2, ylim=c(0,1.2))
curve(dunif(x, min = 0, max = 1, log = FALSE),xlim=c(-0.1,1.2), ylim=c(0,1.2))
curve(dunif(x, min = 0, max = 1, log = FALSE),xlim=c(-0.1,1.2), ylim=c(0,1.2))
curve(dunif(x, min = 0, max = 1, log = FALSE),xlim=c(-0.1,1.2), ylim=c(0,1.3))
curve(dtriangle(x, a=0, b=1, c=(a+b)/2),xlim=c(-0.1,1.2), ylim=c(0,1.3))
curve(dtriangle(x, a=0, b=1),xlim=c(-0.1,1.2), ylim=c(0,1.3))
curve(dtriangle(x, a=0, b=1, c=0.5),xlim=c(-0.1,1.2), ylim=c(0,1.3))
curve(dtriangle(x, a=0, b=1, c=0.5),xlim=c(-0.1,1.2), ylim=c(0,5))
curve(dtriangle(x, a=0, b=1, c=0.5),xlim=c(-0.1,1.2), ylim=c(0,3))
curve(dtriangle(x, a=0, b=1, c=1),xlim=c(-0.1,1.2), ylim=c(0,3))
curve(dtriangle(x, a=0, b=24, c=24),xlim=c(-0.1,24), ylim=c(0,1))
curve(dtriangle(x, a=0, b=24, c=24),xlim=c(-0.1,24), ylim=c(0,0.2))
curve(dtriangle(x, a=0, b=10 c=0),xlim=c(-0.1,24), ylim=c(0,0.2))
curve(dtriangle(x, a=0, b=10, c=0),xlim=c(-0.1,24), ylim=c(0,0.2))
curve(prange(lower=0, upper=11),xlim=c(-0.1,24), ylim=c(0,0.2))
curve(prange(x, lower=0, upper=11),xlim=c(-0.1,24), ylim=c(0,0.2))
curve(prange(x, lower=0, upper=11),xlim=c(-0.1,24), ylim=c(0,1.2))
curve(dtriangle(x, a=0, b=10, c=0),xlim=c(-0.1,24), ylim=c(0,0.2))
curve(prange(x, lower=0, upper=11),xlim=c(-0.1,24), ylim=c(0,1.2))
case.app.fun<-dtriangle(x, a=0, b=10, c=0)
case.app.fun<-dtriangle(a=0, b=10, c=0)
curve(prange(x, lower=0, upper=11),xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
x=(0:11,0.1)
x=(0:11;0.1)
x=(0:11 0.1)
x=(0:11,0.1)
curve(dtriangle(x, a=0, b=10, c=0),xlim=c(-0.1,24), ylim=c(0,0.2))
curve(prange(x, lower=0, upper=11),xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-dtriangle(a=0, b=10, c=0)
case.app.fun<-dtriangle(x, a=0, b=10, c=0)
tech.app.fun<-prange(x, lower=0, upper=11)
n.sample<-1000
mc.integrate<-function(case.app.fun, tech.app.fun, n.sample)
q
mc.integrate(case.app.fun, tech.app.fun, n.sample)
test<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
test
curve(dtriangle(x, a=0, b=10, c=1),xlim=c(-0.1,24), ylim=c(0,0.2))
curve(prange(x, lower=0, upper=11),xlim=c(-0.1,24), ylim=c(0,1.2))
f1<-dtriangle(x, a=0, b=10, c=1)
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
f1<-dtriangle(x, a=0, b=10, c=1)
f1<-function(dtriangle(x, a=0, b=10, c=1))
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
f1<-function(dtriangle(x, a=0, b=10, c=1))
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=1)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=1)}
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=1)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=11)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=1)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=11)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-f1
tech.app.fun<-f2
n.sample<-1000
test<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
test
test<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
View(test)
View(test)
View(test)
View(test)
View(test)
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=1)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=11)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-f1
tech.app.fun<-f2
n.sample<-1000
testy<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
testy
rm(list=ls())
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=1)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=11)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-f1
tech.app.fun<-f2
n.sample<-1000
testy<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
testy
rm(list=ls())
source("mc.integrate.r")
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=1)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=11)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-f1
tech.app.fun<-f2
n.sample<-1000
testy<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
testy
rm(list=ls())
source("mc.integrate.r")
library(triangle)
source("appfunctions.r")
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=1)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=11)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-f1
tech.app.fun<-f2
n.sample<-1000
testy<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
testy
rm(list=ls())
source("mc.integrate.r")
library(triangle)
source("appfunctions.r")
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=1)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=11)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-f1
tech.app.fun<-f2
n.sample<-1000
testscore<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
testscore
rm(list=ls())
source("mc.integrate.r")
library(triangle)
source("appfunctions.r")
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=o)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=11)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-f1
tech.app.fun<-f2
n.sample<-1000
testscore<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
testscore
rm(list=ls())
source("mc.integrate.r")
library(triangle)
source("appfunctions.r")
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=0)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=11)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-f1
tech.app.fun<-f2
n.sample<-1000
testscore<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
testscore
rm(list=ls())
source("mc.integrate.r")
library(triangle)
source("appfunctions.r")
f1<-function(x,a,b,c){dtriangle(x, a=0, b=10, c=0)}
f2<-function(x,a,b,c){prange(x, lower=0, upper=1)}
curve(f1,xlim=c(-0.1,24), ylim=c(0,0.2))
curve(f2,xlim=c(-0.1,24), ylim=c(0,1.2))
x=(0:11)
x
case.app.fun<-f1
tech.app.fun<-f2
n.sample<-1000
testscore<-mc.integrate(case.app.fun, tech.app.fun, n.sample)
testscore
x=(0:0.1:11)
x
x=(0:0.1:11)
x
x=c(0:0.1:11)
x
x=0:0.1:11
x
rm(list=ls())
x=0:0.1:11
x
x=0::11
x=0:11
x
rm(list=ls())
x=0:11
x
x=0:0.1:11
x=0:11:0.1
x
